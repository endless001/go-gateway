// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-gateway/ent/loadbalance"
	"go-gateway/ent/predicate"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// LoadBalanceUpdate is the builder for updating LoadBalance entities.
type LoadBalanceUpdate struct {
	config
	hooks    []Hook
	mutation *LoadBalanceMutation
}

// Where adds a new predicate for the builder.
func (lbu *LoadBalanceUpdate) Where(ps ...predicate.LoadBalance) *LoadBalanceUpdate {
	lbu.mutation.predicates = append(lbu.mutation.predicates, ps...)
	return lbu
}

// SetServiceID sets the service_id field.
func (lbu *LoadBalanceUpdate) SetServiceID(i int64) *LoadBalanceUpdate {
	lbu.mutation.ResetServiceID()
	lbu.mutation.SetServiceID(i)
	return lbu
}

// AddServiceID adds i to service_id.
func (lbu *LoadBalanceUpdate) AddServiceID(i int64) *LoadBalanceUpdate {
	lbu.mutation.AddServiceID(i)
	return lbu
}

// SetCheckMethod sets the check_method field.
func (lbu *LoadBalanceUpdate) SetCheckMethod(i int) *LoadBalanceUpdate {
	lbu.mutation.ResetCheckMethod()
	lbu.mutation.SetCheckMethod(i)
	return lbu
}

// AddCheckMethod adds i to check_method.
func (lbu *LoadBalanceUpdate) AddCheckMethod(i int) *LoadBalanceUpdate {
	lbu.mutation.AddCheckMethod(i)
	return lbu
}

// SetCheckTimeout sets the check_timeout field.
func (lbu *LoadBalanceUpdate) SetCheckTimeout(i int) *LoadBalanceUpdate {
	lbu.mutation.ResetCheckTimeout()
	lbu.mutation.SetCheckTimeout(i)
	return lbu
}

// AddCheckTimeout adds i to check_timeout.
func (lbu *LoadBalanceUpdate) AddCheckTimeout(i int) *LoadBalanceUpdate {
	lbu.mutation.AddCheckTimeout(i)
	return lbu
}

// SetCheckInterval sets the check_interval field.
func (lbu *LoadBalanceUpdate) SetCheckInterval(i int) *LoadBalanceUpdate {
	lbu.mutation.ResetCheckInterval()
	lbu.mutation.SetCheckInterval(i)
	return lbu
}

// AddCheckInterval adds i to check_interval.
func (lbu *LoadBalanceUpdate) AddCheckInterval(i int) *LoadBalanceUpdate {
	lbu.mutation.AddCheckInterval(i)
	return lbu
}

// SetRoundType sets the round_type field.
func (lbu *LoadBalanceUpdate) SetRoundType(i int) *LoadBalanceUpdate {
	lbu.mutation.ResetRoundType()
	lbu.mutation.SetRoundType(i)
	return lbu
}

// AddRoundType adds i to round_type.
func (lbu *LoadBalanceUpdate) AddRoundType(i int) *LoadBalanceUpdate {
	lbu.mutation.AddRoundType(i)
	return lbu
}

// SetIPList sets the ip_list field.
func (lbu *LoadBalanceUpdate) SetIPList(s string) *LoadBalanceUpdate {
	lbu.mutation.SetIPList(s)
	return lbu
}

// SetWeightList sets the weight_list field.
func (lbu *LoadBalanceUpdate) SetWeightList(s string) *LoadBalanceUpdate {
	lbu.mutation.SetWeightList(s)
	return lbu
}

// SetForbidList sets the forbid_list field.
func (lbu *LoadBalanceUpdate) SetForbidList(s string) *LoadBalanceUpdate {
	lbu.mutation.SetForbidList(s)
	return lbu
}

// SetUpstreamConnectTimeout sets the upstream_connect_timeout field.
func (lbu *LoadBalanceUpdate) SetUpstreamConnectTimeout(i int) *LoadBalanceUpdate {
	lbu.mutation.ResetUpstreamConnectTimeout()
	lbu.mutation.SetUpstreamConnectTimeout(i)
	return lbu
}

// AddUpstreamConnectTimeout adds i to upstream_connect_timeout.
func (lbu *LoadBalanceUpdate) AddUpstreamConnectTimeout(i int) *LoadBalanceUpdate {
	lbu.mutation.AddUpstreamConnectTimeout(i)
	return lbu
}

// SetUpstreamHeaderTimeout sets the upstream_header_timeout field.
func (lbu *LoadBalanceUpdate) SetUpstreamHeaderTimeout(i int) *LoadBalanceUpdate {
	lbu.mutation.ResetUpstreamHeaderTimeout()
	lbu.mutation.SetUpstreamHeaderTimeout(i)
	return lbu
}

// AddUpstreamHeaderTimeout adds i to upstream_header_timeout.
func (lbu *LoadBalanceUpdate) AddUpstreamHeaderTimeout(i int) *LoadBalanceUpdate {
	lbu.mutation.AddUpstreamHeaderTimeout(i)
	return lbu
}

// SetUpstreamIdleTimeout sets the upstream_idle_timeout field.
func (lbu *LoadBalanceUpdate) SetUpstreamIdleTimeout(i int) *LoadBalanceUpdate {
	lbu.mutation.ResetUpstreamIdleTimeout()
	lbu.mutation.SetUpstreamIdleTimeout(i)
	return lbu
}

// AddUpstreamIdleTimeout adds i to upstream_idle_timeout.
func (lbu *LoadBalanceUpdate) AddUpstreamIdleTimeout(i int) *LoadBalanceUpdate {
	lbu.mutation.AddUpstreamIdleTimeout(i)
	return lbu
}

// SetUpstreamMaxIdle sets the upstream_max_idle field.
func (lbu *LoadBalanceUpdate) SetUpstreamMaxIdle(i int) *LoadBalanceUpdate {
	lbu.mutation.ResetUpstreamMaxIdle()
	lbu.mutation.SetUpstreamMaxIdle(i)
	return lbu
}

// AddUpstreamMaxIdle adds i to upstream_max_idle.
func (lbu *LoadBalanceUpdate) AddUpstreamMaxIdle(i int) *LoadBalanceUpdate {
	lbu.mutation.AddUpstreamMaxIdle(i)
	return lbu
}

// Mutation returns the LoadBalanceMutation object of the builder.
func (lbu *LoadBalanceUpdate) Mutation() *LoadBalanceMutation {
	return lbu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (lbu *LoadBalanceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(lbu.hooks) == 0 {
		affected, err = lbu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LoadBalanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			lbu.mutation = mutation
			affected, err = lbu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(lbu.hooks) - 1; i >= 0; i-- {
			mut = lbu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lbu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (lbu *LoadBalanceUpdate) SaveX(ctx context.Context) int {
	affected, err := lbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lbu *LoadBalanceUpdate) Exec(ctx context.Context) error {
	_, err := lbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lbu *LoadBalanceUpdate) ExecX(ctx context.Context) {
	if err := lbu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lbu *LoadBalanceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   loadbalance.Table,
			Columns: loadbalance.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: loadbalance.FieldID,
			},
		},
	}
	if ps := lbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lbu.mutation.ServiceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: loadbalance.FieldServiceID,
		})
	}
	if value, ok := lbu.mutation.AddedServiceID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: loadbalance.FieldServiceID,
		})
	}
	if value, ok := lbu.mutation.CheckMethod(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: loadbalance.FieldCheckMethod,
		})
	}
	if value, ok := lbu.mutation.AddedCheckMethod(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: loadbalance.FieldCheckMethod,
		})
	}
	if value, ok := lbu.mutation.CheckTimeout(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: loadbalance.FieldCheckTimeout,
		})
	}
	if value, ok := lbu.mutation.AddedCheckTimeout(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: loadbalance.FieldCheckTimeout,
		})
	}
	if value, ok := lbu.mutation.CheckInterval(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: loadbalance.FieldCheckInterval,
		})
	}
	if value, ok := lbu.mutation.AddedCheckInterval(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: loadbalance.FieldCheckInterval,
		})
	}
	if value, ok := lbu.mutation.RoundType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: loadbalance.FieldRoundType,
		})
	}
	if value, ok := lbu.mutation.AddedRoundType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: loadbalance.FieldRoundType,
		})
	}
	if value, ok := lbu.mutation.IPList(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: loadbalance.FieldIPList,
		})
	}
	if value, ok := lbu.mutation.WeightList(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: loadbalance.FieldWeightList,
		})
	}
	if value, ok := lbu.mutation.ForbidList(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: loadbalance.FieldForbidList,
		})
	}
	if value, ok := lbu.mutation.UpstreamConnectTimeout(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: loadbalance.FieldUpstreamConnectTimeout,
		})
	}
	if value, ok := lbu.mutation.AddedUpstreamConnectTimeout(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: loadbalance.FieldUpstreamConnectTimeout,
		})
	}
	if value, ok := lbu.mutation.UpstreamHeaderTimeout(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: loadbalance.FieldUpstreamHeaderTimeout,
		})
	}
	if value, ok := lbu.mutation.AddedUpstreamHeaderTimeout(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: loadbalance.FieldUpstreamHeaderTimeout,
		})
	}
	if value, ok := lbu.mutation.UpstreamIdleTimeout(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: loadbalance.FieldUpstreamIdleTimeout,
		})
	}
	if value, ok := lbu.mutation.AddedUpstreamIdleTimeout(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: loadbalance.FieldUpstreamIdleTimeout,
		})
	}
	if value, ok := lbu.mutation.UpstreamMaxIdle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: loadbalance.FieldUpstreamMaxIdle,
		})
	}
	if value, ok := lbu.mutation.AddedUpstreamMaxIdle(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: loadbalance.FieldUpstreamMaxIdle,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{loadbalance.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// LoadBalanceUpdateOne is the builder for updating a single LoadBalance entity.
type LoadBalanceUpdateOne struct {
	config
	hooks    []Hook
	mutation *LoadBalanceMutation
}

// SetServiceID sets the service_id field.
func (lbuo *LoadBalanceUpdateOne) SetServiceID(i int64) *LoadBalanceUpdateOne {
	lbuo.mutation.ResetServiceID()
	lbuo.mutation.SetServiceID(i)
	return lbuo
}

// AddServiceID adds i to service_id.
func (lbuo *LoadBalanceUpdateOne) AddServiceID(i int64) *LoadBalanceUpdateOne {
	lbuo.mutation.AddServiceID(i)
	return lbuo
}

// SetCheckMethod sets the check_method field.
func (lbuo *LoadBalanceUpdateOne) SetCheckMethod(i int) *LoadBalanceUpdateOne {
	lbuo.mutation.ResetCheckMethod()
	lbuo.mutation.SetCheckMethod(i)
	return lbuo
}

// AddCheckMethod adds i to check_method.
func (lbuo *LoadBalanceUpdateOne) AddCheckMethod(i int) *LoadBalanceUpdateOne {
	lbuo.mutation.AddCheckMethod(i)
	return lbuo
}

// SetCheckTimeout sets the check_timeout field.
func (lbuo *LoadBalanceUpdateOne) SetCheckTimeout(i int) *LoadBalanceUpdateOne {
	lbuo.mutation.ResetCheckTimeout()
	lbuo.mutation.SetCheckTimeout(i)
	return lbuo
}

// AddCheckTimeout adds i to check_timeout.
func (lbuo *LoadBalanceUpdateOne) AddCheckTimeout(i int) *LoadBalanceUpdateOne {
	lbuo.mutation.AddCheckTimeout(i)
	return lbuo
}

// SetCheckInterval sets the check_interval field.
func (lbuo *LoadBalanceUpdateOne) SetCheckInterval(i int) *LoadBalanceUpdateOne {
	lbuo.mutation.ResetCheckInterval()
	lbuo.mutation.SetCheckInterval(i)
	return lbuo
}

// AddCheckInterval adds i to check_interval.
func (lbuo *LoadBalanceUpdateOne) AddCheckInterval(i int) *LoadBalanceUpdateOne {
	lbuo.mutation.AddCheckInterval(i)
	return lbuo
}

// SetRoundType sets the round_type field.
func (lbuo *LoadBalanceUpdateOne) SetRoundType(i int) *LoadBalanceUpdateOne {
	lbuo.mutation.ResetRoundType()
	lbuo.mutation.SetRoundType(i)
	return lbuo
}

// AddRoundType adds i to round_type.
func (lbuo *LoadBalanceUpdateOne) AddRoundType(i int) *LoadBalanceUpdateOne {
	lbuo.mutation.AddRoundType(i)
	return lbuo
}

// SetIPList sets the ip_list field.
func (lbuo *LoadBalanceUpdateOne) SetIPList(s string) *LoadBalanceUpdateOne {
	lbuo.mutation.SetIPList(s)
	return lbuo
}

// SetWeightList sets the weight_list field.
func (lbuo *LoadBalanceUpdateOne) SetWeightList(s string) *LoadBalanceUpdateOne {
	lbuo.mutation.SetWeightList(s)
	return lbuo
}

// SetForbidList sets the forbid_list field.
func (lbuo *LoadBalanceUpdateOne) SetForbidList(s string) *LoadBalanceUpdateOne {
	lbuo.mutation.SetForbidList(s)
	return lbuo
}

// SetUpstreamConnectTimeout sets the upstream_connect_timeout field.
func (lbuo *LoadBalanceUpdateOne) SetUpstreamConnectTimeout(i int) *LoadBalanceUpdateOne {
	lbuo.mutation.ResetUpstreamConnectTimeout()
	lbuo.mutation.SetUpstreamConnectTimeout(i)
	return lbuo
}

// AddUpstreamConnectTimeout adds i to upstream_connect_timeout.
func (lbuo *LoadBalanceUpdateOne) AddUpstreamConnectTimeout(i int) *LoadBalanceUpdateOne {
	lbuo.mutation.AddUpstreamConnectTimeout(i)
	return lbuo
}

// SetUpstreamHeaderTimeout sets the upstream_header_timeout field.
func (lbuo *LoadBalanceUpdateOne) SetUpstreamHeaderTimeout(i int) *LoadBalanceUpdateOne {
	lbuo.mutation.ResetUpstreamHeaderTimeout()
	lbuo.mutation.SetUpstreamHeaderTimeout(i)
	return lbuo
}

// AddUpstreamHeaderTimeout adds i to upstream_header_timeout.
func (lbuo *LoadBalanceUpdateOne) AddUpstreamHeaderTimeout(i int) *LoadBalanceUpdateOne {
	lbuo.mutation.AddUpstreamHeaderTimeout(i)
	return lbuo
}

// SetUpstreamIdleTimeout sets the upstream_idle_timeout field.
func (lbuo *LoadBalanceUpdateOne) SetUpstreamIdleTimeout(i int) *LoadBalanceUpdateOne {
	lbuo.mutation.ResetUpstreamIdleTimeout()
	lbuo.mutation.SetUpstreamIdleTimeout(i)
	return lbuo
}

// AddUpstreamIdleTimeout adds i to upstream_idle_timeout.
func (lbuo *LoadBalanceUpdateOne) AddUpstreamIdleTimeout(i int) *LoadBalanceUpdateOne {
	lbuo.mutation.AddUpstreamIdleTimeout(i)
	return lbuo
}

// SetUpstreamMaxIdle sets the upstream_max_idle field.
func (lbuo *LoadBalanceUpdateOne) SetUpstreamMaxIdle(i int) *LoadBalanceUpdateOne {
	lbuo.mutation.ResetUpstreamMaxIdle()
	lbuo.mutation.SetUpstreamMaxIdle(i)
	return lbuo
}

// AddUpstreamMaxIdle adds i to upstream_max_idle.
func (lbuo *LoadBalanceUpdateOne) AddUpstreamMaxIdle(i int) *LoadBalanceUpdateOne {
	lbuo.mutation.AddUpstreamMaxIdle(i)
	return lbuo
}

// Mutation returns the LoadBalanceMutation object of the builder.
func (lbuo *LoadBalanceUpdateOne) Mutation() *LoadBalanceMutation {
	return lbuo.mutation
}

// Save executes the query and returns the updated entity.
func (lbuo *LoadBalanceUpdateOne) Save(ctx context.Context) (*LoadBalance, error) {
	var (
		err  error
		node *LoadBalance
	)
	if len(lbuo.hooks) == 0 {
		node, err = lbuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LoadBalanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			lbuo.mutation = mutation
			node, err = lbuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(lbuo.hooks) - 1; i >= 0; i-- {
			mut = lbuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lbuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (lbuo *LoadBalanceUpdateOne) SaveX(ctx context.Context) *LoadBalance {
	node, err := lbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lbuo *LoadBalanceUpdateOne) Exec(ctx context.Context) error {
	_, err := lbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lbuo *LoadBalanceUpdateOne) ExecX(ctx context.Context) {
	if err := lbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lbuo *LoadBalanceUpdateOne) sqlSave(ctx context.Context) (_node *LoadBalance, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   loadbalance.Table,
			Columns: loadbalance.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: loadbalance.FieldID,
			},
		},
	}
	id, ok := lbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing LoadBalance.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := lbuo.mutation.ServiceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: loadbalance.FieldServiceID,
		})
	}
	if value, ok := lbuo.mutation.AddedServiceID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: loadbalance.FieldServiceID,
		})
	}
	if value, ok := lbuo.mutation.CheckMethod(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: loadbalance.FieldCheckMethod,
		})
	}
	if value, ok := lbuo.mutation.AddedCheckMethod(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: loadbalance.FieldCheckMethod,
		})
	}
	if value, ok := lbuo.mutation.CheckTimeout(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: loadbalance.FieldCheckTimeout,
		})
	}
	if value, ok := lbuo.mutation.AddedCheckTimeout(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: loadbalance.FieldCheckTimeout,
		})
	}
	if value, ok := lbuo.mutation.CheckInterval(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: loadbalance.FieldCheckInterval,
		})
	}
	if value, ok := lbuo.mutation.AddedCheckInterval(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: loadbalance.FieldCheckInterval,
		})
	}
	if value, ok := lbuo.mutation.RoundType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: loadbalance.FieldRoundType,
		})
	}
	if value, ok := lbuo.mutation.AddedRoundType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: loadbalance.FieldRoundType,
		})
	}
	if value, ok := lbuo.mutation.IPList(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: loadbalance.FieldIPList,
		})
	}
	if value, ok := lbuo.mutation.WeightList(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: loadbalance.FieldWeightList,
		})
	}
	if value, ok := lbuo.mutation.ForbidList(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: loadbalance.FieldForbidList,
		})
	}
	if value, ok := lbuo.mutation.UpstreamConnectTimeout(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: loadbalance.FieldUpstreamConnectTimeout,
		})
	}
	if value, ok := lbuo.mutation.AddedUpstreamConnectTimeout(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: loadbalance.FieldUpstreamConnectTimeout,
		})
	}
	if value, ok := lbuo.mutation.UpstreamHeaderTimeout(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: loadbalance.FieldUpstreamHeaderTimeout,
		})
	}
	if value, ok := lbuo.mutation.AddedUpstreamHeaderTimeout(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: loadbalance.FieldUpstreamHeaderTimeout,
		})
	}
	if value, ok := lbuo.mutation.UpstreamIdleTimeout(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: loadbalance.FieldUpstreamIdleTimeout,
		})
	}
	if value, ok := lbuo.mutation.AddedUpstreamIdleTimeout(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: loadbalance.FieldUpstreamIdleTimeout,
		})
	}
	if value, ok := lbuo.mutation.UpstreamMaxIdle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: loadbalance.FieldUpstreamMaxIdle,
		})
	}
	if value, ok := lbuo.mutation.AddedUpstreamMaxIdle(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: loadbalance.FieldUpstreamMaxIdle,
		})
	}
	_node = &LoadBalance{config: lbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, lbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{loadbalance.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
