// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-gateway/ent/grpcrule"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// GrpcRuleCreate is the builder for creating a GrpcRule entity.
type GrpcRuleCreate struct {
	config
	mutation *GrpcRuleMutation
	hooks    []Hook
}

// SetServiceID sets the service_id field.
func (grc *GrpcRuleCreate) SetServiceID(i int64) *GrpcRuleCreate {
	grc.mutation.SetServiceID(i)
	return grc
}

// SetPort sets the Port field.
func (grc *GrpcRuleCreate) SetPort(i int) *GrpcRuleCreate {
	grc.mutation.SetPort(i)
	return grc
}

// SetHeaderTransfor sets the header_transfor field.
func (grc *GrpcRuleCreate) SetHeaderTransfor(s string) *GrpcRuleCreate {
	grc.mutation.SetHeaderTransfor(s)
	return grc
}

// SetID sets the id field.
func (grc *GrpcRuleCreate) SetID(i int64) *GrpcRuleCreate {
	grc.mutation.SetID(i)
	return grc
}

// Mutation returns the GrpcRuleMutation object of the builder.
func (grc *GrpcRuleCreate) Mutation() *GrpcRuleMutation {
	return grc.mutation
}

// Save creates the GrpcRule in the database.
func (grc *GrpcRuleCreate) Save(ctx context.Context) (*GrpcRule, error) {
	var (
		err  error
		node *GrpcRule
	)
	if len(grc.hooks) == 0 {
		if err = grc.check(); err != nil {
			return nil, err
		}
		node, err = grc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GrpcRuleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = grc.check(); err != nil {
				return nil, err
			}
			grc.mutation = mutation
			node, err = grc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(grc.hooks) - 1; i >= 0; i-- {
			mut = grc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, grc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (grc *GrpcRuleCreate) SaveX(ctx context.Context) *GrpcRule {
	v, err := grc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (grc *GrpcRuleCreate) check() error {
	if _, ok := grc.mutation.ServiceID(); !ok {
		return &ValidationError{Name: "service_id", err: errors.New("ent: missing required field \"service_id\"")}
	}
	if _, ok := grc.mutation.Port(); !ok {
		return &ValidationError{Name: "Port", err: errors.New("ent: missing required field \"Port\"")}
	}
	if _, ok := grc.mutation.HeaderTransfor(); !ok {
		return &ValidationError{Name: "header_transfor", err: errors.New("ent: missing required field \"header_transfor\"")}
	}
	return nil
}

func (grc *GrpcRuleCreate) sqlSave(ctx context.Context) (*GrpcRule, error) {
	_node, _spec := grc.createSpec()
	if err := sqlgraph.CreateNode(ctx, grc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (grc *GrpcRuleCreate) createSpec() (*GrpcRule, *sqlgraph.CreateSpec) {
	var (
		_node = &GrpcRule{config: grc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: grpcrule.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: grpcrule.FieldID,
			},
		}
	)
	if id, ok := grc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := grc.mutation.ServiceID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: grpcrule.FieldServiceID,
		})
		_node.ServiceID = value
	}
	if value, ok := grc.mutation.Port(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: grpcrule.FieldPort,
		})
		_node.Port = value
	}
	if value, ok := grc.mutation.HeaderTransfor(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: grpcrule.FieldHeaderTransfor,
		})
		_node.HeaderTransfor = value
	}
	return _node, _spec
}

// GrpcRuleCreateBulk is the builder for creating a bulk of GrpcRule entities.
type GrpcRuleCreateBulk struct {
	config
	builders []*GrpcRuleCreate
}

// Save creates the GrpcRule entities in the database.
func (grcb *GrpcRuleCreateBulk) Save(ctx context.Context) ([]*GrpcRule, error) {
	specs := make([]*sqlgraph.CreateSpec, len(grcb.builders))
	nodes := make([]*GrpcRule, len(grcb.builders))
	mutators := make([]Mutator, len(grcb.builders))
	for i := range grcb.builders {
		func(i int, root context.Context) {
			builder := grcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GrpcRuleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, grcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, grcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				if nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, grcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (grcb *GrpcRuleCreateBulk) SaveX(ctx context.Context) []*GrpcRule {
	v, err := grcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
