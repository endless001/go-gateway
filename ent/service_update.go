// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-gateway/ent/predicate"
	"go-gateway/ent/service"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// ServiceUpdate is the builder for updating Service entities.
type ServiceUpdate struct {
	config
	hooks    []Hook
	mutation *ServiceMutation
}

// Where adds a new predicate for the builder.
func (su *ServiceUpdate) Where(ps ...predicate.Service) *ServiceUpdate {
	su.mutation.predicates = append(su.mutation.predicates, ps...)
	return su
}

// SetLoadType sets the load_type field.
func (su *ServiceUpdate) SetLoadType(i int) *ServiceUpdate {
	su.mutation.ResetLoadType()
	su.mutation.SetLoadType(i)
	return su
}

// AddLoadType adds i to load_type.
func (su *ServiceUpdate) AddLoadType(i int) *ServiceUpdate {
	su.mutation.AddLoadType(i)
	return su
}

// SetServiceName sets the service_name field.
func (su *ServiceUpdate) SetServiceName(s string) *ServiceUpdate {
	su.mutation.SetServiceName(s)
	return su
}

// SetServiceDesc sets the service_desc field.
func (su *ServiceUpdate) SetServiceDesc(s string) *ServiceUpdate {
	su.mutation.SetServiceDesc(s)
	return su
}

// SetCreateAt sets the create_at field.
func (su *ServiceUpdate) SetCreateAt(t time.Time) *ServiceUpdate {
	su.mutation.SetCreateAt(t)
	return su
}

// SetUpdateAt sets the update_at field.
func (su *ServiceUpdate) SetUpdateAt(t time.Time) *ServiceUpdate {
	su.mutation.SetUpdateAt(t)
	return su
}

// SetIsDelete sets the is_delete field.
func (su *ServiceUpdate) SetIsDelete(i int8) *ServiceUpdate {
	su.mutation.ResetIsDelete()
	su.mutation.SetIsDelete(i)
	return su
}

// AddIsDelete adds i to is_delete.
func (su *ServiceUpdate) AddIsDelete(i int8) *ServiceUpdate {
	su.mutation.AddIsDelete(i)
	return su
}

// Mutation returns the ServiceMutation object of the builder.
func (su *ServiceUpdate) Mutation() *ServiceMutation {
	return su.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (su *ServiceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ServiceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *ServiceUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ServiceUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ServiceUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *ServiceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   service.Table,
			Columns: service.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: service.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.LoadType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: service.FieldLoadType,
		})
	}
	if value, ok := su.mutation.AddedLoadType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: service.FieldLoadType,
		})
	}
	if value, ok := su.mutation.ServiceName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: service.FieldServiceName,
		})
	}
	if value, ok := su.mutation.ServiceDesc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: service.FieldServiceDesc,
		})
	}
	if value, ok := su.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: service.FieldCreateAt,
		})
	}
	if value, ok := su.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: service.FieldUpdateAt,
		})
	}
	if value, ok := su.mutation.IsDelete(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: service.FieldIsDelete,
		})
	}
	if value, ok := su.mutation.AddedIsDelete(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: service.FieldIsDelete,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{service.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ServiceUpdateOne is the builder for updating a single Service entity.
type ServiceUpdateOne struct {
	config
	hooks    []Hook
	mutation *ServiceMutation
}

// SetLoadType sets the load_type field.
func (suo *ServiceUpdateOne) SetLoadType(i int) *ServiceUpdateOne {
	suo.mutation.ResetLoadType()
	suo.mutation.SetLoadType(i)
	return suo
}

// AddLoadType adds i to load_type.
func (suo *ServiceUpdateOne) AddLoadType(i int) *ServiceUpdateOne {
	suo.mutation.AddLoadType(i)
	return suo
}

// SetServiceName sets the service_name field.
func (suo *ServiceUpdateOne) SetServiceName(s string) *ServiceUpdateOne {
	suo.mutation.SetServiceName(s)
	return suo
}

// SetServiceDesc sets the service_desc field.
func (suo *ServiceUpdateOne) SetServiceDesc(s string) *ServiceUpdateOne {
	suo.mutation.SetServiceDesc(s)
	return suo
}

// SetCreateAt sets the create_at field.
func (suo *ServiceUpdateOne) SetCreateAt(t time.Time) *ServiceUpdateOne {
	suo.mutation.SetCreateAt(t)
	return suo
}

// SetUpdateAt sets the update_at field.
func (suo *ServiceUpdateOne) SetUpdateAt(t time.Time) *ServiceUpdateOne {
	suo.mutation.SetUpdateAt(t)
	return suo
}

// SetIsDelete sets the is_delete field.
func (suo *ServiceUpdateOne) SetIsDelete(i int8) *ServiceUpdateOne {
	suo.mutation.ResetIsDelete()
	suo.mutation.SetIsDelete(i)
	return suo
}

// AddIsDelete adds i to is_delete.
func (suo *ServiceUpdateOne) AddIsDelete(i int8) *ServiceUpdateOne {
	suo.mutation.AddIsDelete(i)
	return suo
}

// Mutation returns the ServiceMutation object of the builder.
func (suo *ServiceUpdateOne) Mutation() *ServiceMutation {
	return suo.mutation
}

// Save executes the query and returns the updated entity.
func (suo *ServiceUpdateOne) Save(ctx context.Context) (*Service, error) {
	var (
		err  error
		node *Service
	)
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ServiceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ServiceUpdateOne) SaveX(ctx context.Context) *Service {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ServiceUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ServiceUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *ServiceUpdateOne) sqlSave(ctx context.Context) (_node *Service, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   service.Table,
			Columns: service.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: service.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Service.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := suo.mutation.LoadType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: service.FieldLoadType,
		})
	}
	if value, ok := suo.mutation.AddedLoadType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: service.FieldLoadType,
		})
	}
	if value, ok := suo.mutation.ServiceName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: service.FieldServiceName,
		})
	}
	if value, ok := suo.mutation.ServiceDesc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: service.FieldServiceDesc,
		})
	}
	if value, ok := suo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: service.FieldCreateAt,
		})
	}
	if value, ok := suo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: service.FieldUpdateAt,
		})
	}
	if value, ok := suo.mutation.IsDelete(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: service.FieldIsDelete,
		})
	}
	if value, ok := suo.mutation.AddedIsDelete(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: service.FieldIsDelete,
		})
	}
	_node = &Service{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{service.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
