// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-gateway/ent/accesscontrol"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// AccessControlCreate is the builder for creating a AccessControl entity.
type AccessControlCreate struct {
	config
	mutation *AccessControlMutation
	hooks    []Hook
}

// SetServiceID sets the service_id field.
func (acc *AccessControlCreate) SetServiceID(i int64) *AccessControlCreate {
	acc.mutation.SetServiceID(i)
	return acc
}

// SetOpenAuth sets the open_auth field.
func (acc *AccessControlCreate) SetOpenAuth(i int) *AccessControlCreate {
	acc.mutation.SetOpenAuth(i)
	return acc
}

// SetBlackList sets the black_list field.
func (acc *AccessControlCreate) SetBlackList(s string) *AccessControlCreate {
	acc.mutation.SetBlackList(s)
	return acc
}

// SetWhiteList sets the white_list field.
func (acc *AccessControlCreate) SetWhiteList(s string) *AccessControlCreate {
	acc.mutation.SetWhiteList(s)
	return acc
}

// SetWhiteHostName sets the white_host_name field.
func (acc *AccessControlCreate) SetWhiteHostName(s string) *AccessControlCreate {
	acc.mutation.SetWhiteHostName(s)
	return acc
}

// SetClientipFlowLimit sets the clientip_flow_limit field.
func (acc *AccessControlCreate) SetClientipFlowLimit(i int) *AccessControlCreate {
	acc.mutation.SetClientipFlowLimit(i)
	return acc
}

// SetServiceFlowLimit sets the service_flow_limit field.
func (acc *AccessControlCreate) SetServiceFlowLimit(i int) *AccessControlCreate {
	acc.mutation.SetServiceFlowLimit(i)
	return acc
}

// SetID sets the id field.
func (acc *AccessControlCreate) SetID(i int64) *AccessControlCreate {
	acc.mutation.SetID(i)
	return acc
}

// Mutation returns the AccessControlMutation object of the builder.
func (acc *AccessControlCreate) Mutation() *AccessControlMutation {
	return acc.mutation
}

// Save creates the AccessControl in the database.
func (acc *AccessControlCreate) Save(ctx context.Context) (*AccessControl, error) {
	var (
		err  error
		node *AccessControl
	)
	if len(acc.hooks) == 0 {
		if err = acc.check(); err != nil {
			return nil, err
		}
		node, err = acc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccessControlMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = acc.check(); err != nil {
				return nil, err
			}
			acc.mutation = mutation
			node, err = acc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(acc.hooks) - 1; i >= 0; i-- {
			mut = acc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, acc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (acc *AccessControlCreate) SaveX(ctx context.Context) *AccessControl {
	v, err := acc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (acc *AccessControlCreate) check() error {
	if _, ok := acc.mutation.ServiceID(); !ok {
		return &ValidationError{Name: "service_id", err: errors.New("ent: missing required field \"service_id\"")}
	}
	if _, ok := acc.mutation.OpenAuth(); !ok {
		return &ValidationError{Name: "open_auth", err: errors.New("ent: missing required field \"open_auth\"")}
	}
	if _, ok := acc.mutation.BlackList(); !ok {
		return &ValidationError{Name: "black_list", err: errors.New("ent: missing required field \"black_list\"")}
	}
	if _, ok := acc.mutation.WhiteList(); !ok {
		return &ValidationError{Name: "white_list", err: errors.New("ent: missing required field \"white_list\"")}
	}
	if _, ok := acc.mutation.WhiteHostName(); !ok {
		return &ValidationError{Name: "white_host_name", err: errors.New("ent: missing required field \"white_host_name\"")}
	}
	if _, ok := acc.mutation.ClientipFlowLimit(); !ok {
		return &ValidationError{Name: "clientip_flow_limit", err: errors.New("ent: missing required field \"clientip_flow_limit\"")}
	}
	if _, ok := acc.mutation.ServiceFlowLimit(); !ok {
		return &ValidationError{Name: "service_flow_limit", err: errors.New("ent: missing required field \"service_flow_limit\"")}
	}
	return nil
}

func (acc *AccessControlCreate) sqlSave(ctx context.Context) (*AccessControl, error) {
	_node, _spec := acc.createSpec()
	if err := sqlgraph.CreateNode(ctx, acc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (acc *AccessControlCreate) createSpec() (*AccessControl, *sqlgraph.CreateSpec) {
	var (
		_node = &AccessControl{config: acc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: accesscontrol.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: accesscontrol.FieldID,
			},
		}
	)
	if id, ok := acc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := acc.mutation.ServiceID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: accesscontrol.FieldServiceID,
		})
		_node.ServiceID = value
	}
	if value, ok := acc.mutation.OpenAuth(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: accesscontrol.FieldOpenAuth,
		})
		_node.OpenAuth = value
	}
	if value, ok := acc.mutation.BlackList(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accesscontrol.FieldBlackList,
		})
		_node.BlackList = value
	}
	if value, ok := acc.mutation.WhiteList(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accesscontrol.FieldWhiteList,
		})
		_node.WhiteList = value
	}
	if value, ok := acc.mutation.WhiteHostName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accesscontrol.FieldWhiteHostName,
		})
		_node.WhiteHostName = value
	}
	if value, ok := acc.mutation.ClientipFlowLimit(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: accesscontrol.FieldClientipFlowLimit,
		})
		_node.ClientipFlowLimit = value
	}
	if value, ok := acc.mutation.ServiceFlowLimit(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: accesscontrol.FieldServiceFlowLimit,
		})
		_node.ServiceFlowLimit = value
	}
	return _node, _spec
}

// AccessControlCreateBulk is the builder for creating a bulk of AccessControl entities.
type AccessControlCreateBulk struct {
	config
	builders []*AccessControlCreate
}

// Save creates the AccessControl entities in the database.
func (accb *AccessControlCreateBulk) Save(ctx context.Context) ([]*AccessControl, error) {
	specs := make([]*sqlgraph.CreateSpec, len(accb.builders))
	nodes := make([]*AccessControl, len(accb.builders))
	mutators := make([]Mutator, len(accb.builders))
	for i := range accb.builders {
		func(i int, root context.Context) {
			builder := accb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AccessControlMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, accb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, accb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				if nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, accb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (accb *AccessControlCreateBulk) SaveX(ctx context.Context) []*AccessControl {
	v, err := accb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
