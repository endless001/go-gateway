// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"go-gateway/ent/migrate"

	"go-gateway/ent/accesscontrol"
	"go-gateway/ent/app"
	"go-gateway/ent/grpcrule"
	"go-gateway/ent/httprule"
	"go-gateway/ent/loadbalance"
	"go-gateway/ent/service"
	"go-gateway/ent/tcprule"
	"go-gateway/ent/user"

	"github.com/facebook/ent/dialect"
	"github.com/facebook/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AccessControl is the client for interacting with the AccessControl builders.
	AccessControl *AccessControlClient
	// App is the client for interacting with the App builders.
	App *AppClient
	// GrpcRule is the client for interacting with the GrpcRule builders.
	GrpcRule *GrpcRuleClient
	// HttpRule is the client for interacting with the HttpRule builders.
	HttpRule *HttpRuleClient
	// LoadBalance is the client for interacting with the LoadBalance builders.
	LoadBalance *LoadBalanceClient
	// Service is the client for interacting with the Service builders.
	Service *ServiceClient
	// TcpRule is the client for interacting with the TcpRule builders.
	TcpRule *TcpRuleClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AccessControl = NewAccessControlClient(c.config)
	c.App = NewAppClient(c.config)
	c.GrpcRule = NewGrpcRuleClient(c.config)
	c.HttpRule = NewHttpRuleClient(c.config)
	c.LoadBalance = NewLoadBalanceClient(c.config)
	c.Service = NewServiceClient(c.config)
	c.TcpRule = NewTcpRuleClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		AccessControl: NewAccessControlClient(cfg),
		App:           NewAppClient(cfg),
		GrpcRule:      NewGrpcRuleClient(cfg),
		HttpRule:      NewHttpRuleClient(cfg),
		LoadBalance:   NewLoadBalanceClient(cfg),
		Service:       NewServiceClient(cfg),
		TcpRule:       NewTcpRuleClient(cfg),
		User:          NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:        cfg,
		AccessControl: NewAccessControlClient(cfg),
		App:           NewAppClient(cfg),
		GrpcRule:      NewGrpcRuleClient(cfg),
		HttpRule:      NewHttpRuleClient(cfg),
		LoadBalance:   NewLoadBalanceClient(cfg),
		Service:       NewServiceClient(cfg),
		TcpRule:       NewTcpRuleClient(cfg),
		User:          NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AccessControl.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.AccessControl.Use(hooks...)
	c.App.Use(hooks...)
	c.GrpcRule.Use(hooks...)
	c.HttpRule.Use(hooks...)
	c.LoadBalance.Use(hooks...)
	c.Service.Use(hooks...)
	c.TcpRule.Use(hooks...)
	c.User.Use(hooks...)
}

// AccessControlClient is a client for the AccessControl schema.
type AccessControlClient struct {
	config
}

// NewAccessControlClient returns a client for the AccessControl from the given config.
func NewAccessControlClient(c config) *AccessControlClient {
	return &AccessControlClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `accesscontrol.Hooks(f(g(h())))`.
func (c *AccessControlClient) Use(hooks ...Hook) {
	c.hooks.AccessControl = append(c.hooks.AccessControl, hooks...)
}

// Create returns a create builder for AccessControl.
func (c *AccessControlClient) Create() *AccessControlCreate {
	mutation := newAccessControlMutation(c.config, OpCreate)
	return &AccessControlCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of AccessControl entities.
func (c *AccessControlClient) CreateBulk(builders ...*AccessControlCreate) *AccessControlCreateBulk {
	return &AccessControlCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AccessControl.
func (c *AccessControlClient) Update() *AccessControlUpdate {
	mutation := newAccessControlMutation(c.config, OpUpdate)
	return &AccessControlUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AccessControlClient) UpdateOne(ac *AccessControl) *AccessControlUpdateOne {
	mutation := newAccessControlMutation(c.config, OpUpdateOne, withAccessControl(ac))
	return &AccessControlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AccessControlClient) UpdateOneID(id int64) *AccessControlUpdateOne {
	mutation := newAccessControlMutation(c.config, OpUpdateOne, withAccessControlID(id))
	return &AccessControlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AccessControl.
func (c *AccessControlClient) Delete() *AccessControlDelete {
	mutation := newAccessControlMutation(c.config, OpDelete)
	return &AccessControlDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AccessControlClient) DeleteOne(ac *AccessControl) *AccessControlDeleteOne {
	return c.DeleteOneID(ac.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AccessControlClient) DeleteOneID(id int64) *AccessControlDeleteOne {
	builder := c.Delete().Where(accesscontrol.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AccessControlDeleteOne{builder}
}

// Query returns a query builder for AccessControl.
func (c *AccessControlClient) Query() *AccessControlQuery {
	return &AccessControlQuery{config: c.config}
}

// Get returns a AccessControl entity by its id.
func (c *AccessControlClient) Get(ctx context.Context, id int64) (*AccessControl, error) {
	return c.Query().Where(accesscontrol.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AccessControlClient) GetX(ctx context.Context, id int64) *AccessControl {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AccessControlClient) Hooks() []Hook {
	return c.hooks.AccessControl
}

// AppClient is a client for the App schema.
type AppClient struct {
	config
}

// NewAppClient returns a client for the App from the given config.
func NewAppClient(c config) *AppClient {
	return &AppClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `app.Hooks(f(g(h())))`.
func (c *AppClient) Use(hooks ...Hook) {
	c.hooks.App = append(c.hooks.App, hooks...)
}

// Create returns a create builder for App.
func (c *AppClient) Create() *AppCreate {
	mutation := newAppMutation(c.config, OpCreate)
	return &AppCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of App entities.
func (c *AppClient) CreateBulk(builders ...*AppCreate) *AppCreateBulk {
	return &AppCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for App.
func (c *AppClient) Update() *AppUpdate {
	mutation := newAppMutation(c.config, OpUpdate)
	return &AppUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppClient) UpdateOne(a *App) *AppUpdateOne {
	mutation := newAppMutation(c.config, OpUpdateOne, withApp(a))
	return &AppUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppClient) UpdateOneID(id int64) *AppUpdateOne {
	mutation := newAppMutation(c.config, OpUpdateOne, withAppID(id))
	return &AppUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for App.
func (c *AppClient) Delete() *AppDelete {
	mutation := newAppMutation(c.config, OpDelete)
	return &AppDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AppClient) DeleteOne(a *App) *AppDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AppClient) DeleteOneID(id int64) *AppDeleteOne {
	builder := c.Delete().Where(app.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppDeleteOne{builder}
}

// Query returns a query builder for App.
func (c *AppClient) Query() *AppQuery {
	return &AppQuery{config: c.config}
}

// Get returns a App entity by its id.
func (c *AppClient) Get(ctx context.Context, id int64) (*App, error) {
	return c.Query().Where(app.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppClient) GetX(ctx context.Context, id int64) *App {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AppClient) Hooks() []Hook {
	return c.hooks.App
}

// GrpcRuleClient is a client for the GrpcRule schema.
type GrpcRuleClient struct {
	config
}

// NewGrpcRuleClient returns a client for the GrpcRule from the given config.
func NewGrpcRuleClient(c config) *GrpcRuleClient {
	return &GrpcRuleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `grpcrule.Hooks(f(g(h())))`.
func (c *GrpcRuleClient) Use(hooks ...Hook) {
	c.hooks.GrpcRule = append(c.hooks.GrpcRule, hooks...)
}

// Create returns a create builder for GrpcRule.
func (c *GrpcRuleClient) Create() *GrpcRuleCreate {
	mutation := newGrpcRuleMutation(c.config, OpCreate)
	return &GrpcRuleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of GrpcRule entities.
func (c *GrpcRuleClient) CreateBulk(builders ...*GrpcRuleCreate) *GrpcRuleCreateBulk {
	return &GrpcRuleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GrpcRule.
func (c *GrpcRuleClient) Update() *GrpcRuleUpdate {
	mutation := newGrpcRuleMutation(c.config, OpUpdate)
	return &GrpcRuleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GrpcRuleClient) UpdateOne(gr *GrpcRule) *GrpcRuleUpdateOne {
	mutation := newGrpcRuleMutation(c.config, OpUpdateOne, withGrpcRule(gr))
	return &GrpcRuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GrpcRuleClient) UpdateOneID(id int64) *GrpcRuleUpdateOne {
	mutation := newGrpcRuleMutation(c.config, OpUpdateOne, withGrpcRuleID(id))
	return &GrpcRuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GrpcRule.
func (c *GrpcRuleClient) Delete() *GrpcRuleDelete {
	mutation := newGrpcRuleMutation(c.config, OpDelete)
	return &GrpcRuleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GrpcRuleClient) DeleteOne(gr *GrpcRule) *GrpcRuleDeleteOne {
	return c.DeleteOneID(gr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GrpcRuleClient) DeleteOneID(id int64) *GrpcRuleDeleteOne {
	builder := c.Delete().Where(grpcrule.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GrpcRuleDeleteOne{builder}
}

// Query returns a query builder for GrpcRule.
func (c *GrpcRuleClient) Query() *GrpcRuleQuery {
	return &GrpcRuleQuery{config: c.config}
}

// Get returns a GrpcRule entity by its id.
func (c *GrpcRuleClient) Get(ctx context.Context, id int64) (*GrpcRule, error) {
	return c.Query().Where(grpcrule.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GrpcRuleClient) GetX(ctx context.Context, id int64) *GrpcRule {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GrpcRuleClient) Hooks() []Hook {
	return c.hooks.GrpcRule
}

// HttpRuleClient is a client for the HttpRule schema.
type HttpRuleClient struct {
	config
}

// NewHttpRuleClient returns a client for the HttpRule from the given config.
func NewHttpRuleClient(c config) *HttpRuleClient {
	return &HttpRuleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `httprule.Hooks(f(g(h())))`.
func (c *HttpRuleClient) Use(hooks ...Hook) {
	c.hooks.HttpRule = append(c.hooks.HttpRule, hooks...)
}

// Create returns a create builder for HttpRule.
func (c *HttpRuleClient) Create() *HttpRuleCreate {
	mutation := newHttpRuleMutation(c.config, OpCreate)
	return &HttpRuleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of HttpRule entities.
func (c *HttpRuleClient) CreateBulk(builders ...*HttpRuleCreate) *HttpRuleCreateBulk {
	return &HttpRuleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HttpRule.
func (c *HttpRuleClient) Update() *HttpRuleUpdate {
	mutation := newHttpRuleMutation(c.config, OpUpdate)
	return &HttpRuleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HttpRuleClient) UpdateOne(hr *HttpRule) *HttpRuleUpdateOne {
	mutation := newHttpRuleMutation(c.config, OpUpdateOne, withHttpRule(hr))
	return &HttpRuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HttpRuleClient) UpdateOneID(id int64) *HttpRuleUpdateOne {
	mutation := newHttpRuleMutation(c.config, OpUpdateOne, withHttpRuleID(id))
	return &HttpRuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HttpRule.
func (c *HttpRuleClient) Delete() *HttpRuleDelete {
	mutation := newHttpRuleMutation(c.config, OpDelete)
	return &HttpRuleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *HttpRuleClient) DeleteOne(hr *HttpRule) *HttpRuleDeleteOne {
	return c.DeleteOneID(hr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *HttpRuleClient) DeleteOneID(id int64) *HttpRuleDeleteOne {
	builder := c.Delete().Where(httprule.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HttpRuleDeleteOne{builder}
}

// Query returns a query builder for HttpRule.
func (c *HttpRuleClient) Query() *HttpRuleQuery {
	return &HttpRuleQuery{config: c.config}
}

// Get returns a HttpRule entity by its id.
func (c *HttpRuleClient) Get(ctx context.Context, id int64) (*HttpRule, error) {
	return c.Query().Where(httprule.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HttpRuleClient) GetX(ctx context.Context, id int64) *HttpRule {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *HttpRuleClient) Hooks() []Hook {
	return c.hooks.HttpRule
}

// LoadBalanceClient is a client for the LoadBalance schema.
type LoadBalanceClient struct {
	config
}

// NewLoadBalanceClient returns a client for the LoadBalance from the given config.
func NewLoadBalanceClient(c config) *LoadBalanceClient {
	return &LoadBalanceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `loadbalance.Hooks(f(g(h())))`.
func (c *LoadBalanceClient) Use(hooks ...Hook) {
	c.hooks.LoadBalance = append(c.hooks.LoadBalance, hooks...)
}

// Create returns a create builder for LoadBalance.
func (c *LoadBalanceClient) Create() *LoadBalanceCreate {
	mutation := newLoadBalanceMutation(c.config, OpCreate)
	return &LoadBalanceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of LoadBalance entities.
func (c *LoadBalanceClient) CreateBulk(builders ...*LoadBalanceCreate) *LoadBalanceCreateBulk {
	return &LoadBalanceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LoadBalance.
func (c *LoadBalanceClient) Update() *LoadBalanceUpdate {
	mutation := newLoadBalanceMutation(c.config, OpUpdate)
	return &LoadBalanceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LoadBalanceClient) UpdateOne(lb *LoadBalance) *LoadBalanceUpdateOne {
	mutation := newLoadBalanceMutation(c.config, OpUpdateOne, withLoadBalance(lb))
	return &LoadBalanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LoadBalanceClient) UpdateOneID(id int64) *LoadBalanceUpdateOne {
	mutation := newLoadBalanceMutation(c.config, OpUpdateOne, withLoadBalanceID(id))
	return &LoadBalanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LoadBalance.
func (c *LoadBalanceClient) Delete() *LoadBalanceDelete {
	mutation := newLoadBalanceMutation(c.config, OpDelete)
	return &LoadBalanceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *LoadBalanceClient) DeleteOne(lb *LoadBalance) *LoadBalanceDeleteOne {
	return c.DeleteOneID(lb.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *LoadBalanceClient) DeleteOneID(id int64) *LoadBalanceDeleteOne {
	builder := c.Delete().Where(loadbalance.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LoadBalanceDeleteOne{builder}
}

// Query returns a query builder for LoadBalance.
func (c *LoadBalanceClient) Query() *LoadBalanceQuery {
	return &LoadBalanceQuery{config: c.config}
}

// Get returns a LoadBalance entity by its id.
func (c *LoadBalanceClient) Get(ctx context.Context, id int64) (*LoadBalance, error) {
	return c.Query().Where(loadbalance.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LoadBalanceClient) GetX(ctx context.Context, id int64) *LoadBalance {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *LoadBalanceClient) Hooks() []Hook {
	return c.hooks.LoadBalance
}

// ServiceClient is a client for the Service schema.
type ServiceClient struct {
	config
}

// NewServiceClient returns a client for the Service from the given config.
func NewServiceClient(c config) *ServiceClient {
	return &ServiceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `service.Hooks(f(g(h())))`.
func (c *ServiceClient) Use(hooks ...Hook) {
	c.hooks.Service = append(c.hooks.Service, hooks...)
}

// Create returns a create builder for Service.
func (c *ServiceClient) Create() *ServiceCreate {
	mutation := newServiceMutation(c.config, OpCreate)
	return &ServiceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Service entities.
func (c *ServiceClient) CreateBulk(builders ...*ServiceCreate) *ServiceCreateBulk {
	return &ServiceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Service.
func (c *ServiceClient) Update() *ServiceUpdate {
	mutation := newServiceMutation(c.config, OpUpdate)
	return &ServiceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServiceClient) UpdateOne(s *Service) *ServiceUpdateOne {
	mutation := newServiceMutation(c.config, OpUpdateOne, withService(s))
	return &ServiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServiceClient) UpdateOneID(id int64) *ServiceUpdateOne {
	mutation := newServiceMutation(c.config, OpUpdateOne, withServiceID(id))
	return &ServiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Service.
func (c *ServiceClient) Delete() *ServiceDelete {
	mutation := newServiceMutation(c.config, OpDelete)
	return &ServiceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ServiceClient) DeleteOne(s *Service) *ServiceDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ServiceClient) DeleteOneID(id int64) *ServiceDeleteOne {
	builder := c.Delete().Where(service.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServiceDeleteOne{builder}
}

// Query returns a query builder for Service.
func (c *ServiceClient) Query() *ServiceQuery {
	return &ServiceQuery{config: c.config}
}

// Get returns a Service entity by its id.
func (c *ServiceClient) Get(ctx context.Context, id int64) (*Service, error) {
	return c.Query().Where(service.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServiceClient) GetX(ctx context.Context, id int64) *Service {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ServiceClient) Hooks() []Hook {
	return c.hooks.Service
}

// TcpRuleClient is a client for the TcpRule schema.
type TcpRuleClient struct {
	config
}

// NewTcpRuleClient returns a client for the TcpRule from the given config.
func NewTcpRuleClient(c config) *TcpRuleClient {
	return &TcpRuleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tcprule.Hooks(f(g(h())))`.
func (c *TcpRuleClient) Use(hooks ...Hook) {
	c.hooks.TcpRule = append(c.hooks.TcpRule, hooks...)
}

// Create returns a create builder for TcpRule.
func (c *TcpRuleClient) Create() *TcpRuleCreate {
	mutation := newTcpRuleMutation(c.config, OpCreate)
	return &TcpRuleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of TcpRule entities.
func (c *TcpRuleClient) CreateBulk(builders ...*TcpRuleCreate) *TcpRuleCreateBulk {
	return &TcpRuleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TcpRule.
func (c *TcpRuleClient) Update() *TcpRuleUpdate {
	mutation := newTcpRuleMutation(c.config, OpUpdate)
	return &TcpRuleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TcpRuleClient) UpdateOne(tr *TcpRule) *TcpRuleUpdateOne {
	mutation := newTcpRuleMutation(c.config, OpUpdateOne, withTcpRule(tr))
	return &TcpRuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TcpRuleClient) UpdateOneID(id int64) *TcpRuleUpdateOne {
	mutation := newTcpRuleMutation(c.config, OpUpdateOne, withTcpRuleID(id))
	return &TcpRuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TcpRule.
func (c *TcpRuleClient) Delete() *TcpRuleDelete {
	mutation := newTcpRuleMutation(c.config, OpDelete)
	return &TcpRuleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TcpRuleClient) DeleteOne(tr *TcpRule) *TcpRuleDeleteOne {
	return c.DeleteOneID(tr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TcpRuleClient) DeleteOneID(id int64) *TcpRuleDeleteOne {
	builder := c.Delete().Where(tcprule.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TcpRuleDeleteOne{builder}
}

// Query returns a query builder for TcpRule.
func (c *TcpRuleClient) Query() *TcpRuleQuery {
	return &TcpRuleQuery{config: c.config}
}

// Get returns a TcpRule entity by its id.
func (c *TcpRuleClient) Get(ctx context.Context, id int64) (*TcpRule, error) {
	return c.Query().Where(tcprule.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TcpRuleClient) GetX(ctx context.Context, id int64) *TcpRule {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TcpRuleClient) Hooks() []Hook {
	return c.hooks.TcpRule
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{config: c.config}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
