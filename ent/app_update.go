// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-gateway/ent/app"
	"go-gateway/ent/predicate"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// AppUpdate is the builder for updating App entities.
type AppUpdate struct {
	config
	hooks    []Hook
	mutation *AppMutation
}

// Where adds a new predicate for the builder.
func (au *AppUpdate) Where(ps ...predicate.App) *AppUpdate {
	au.mutation.predicates = append(au.mutation.predicates, ps...)
	return au
}

// SetAppID sets the app_id field.
func (au *AppUpdate) SetAppID(s string) *AppUpdate {
	au.mutation.SetAppID(s)
	return au
}

// SetName sets the name field.
func (au *AppUpdate) SetName(s string) *AppUpdate {
	au.mutation.SetName(s)
	return au
}

// SetSecret sets the secret field.
func (au *AppUpdate) SetSecret(s string) *AppUpdate {
	au.mutation.SetSecret(s)
	return au
}

// SetWhiteIps sets the white_ips field.
func (au *AppUpdate) SetWhiteIps(s string) *AppUpdate {
	au.mutation.SetWhiteIps(s)
	return au
}

// SetQpd sets the qpd field.
func (au *AppUpdate) SetQpd(i int) *AppUpdate {
	au.mutation.ResetQpd()
	au.mutation.SetQpd(i)
	return au
}

// AddQpd adds i to qpd.
func (au *AppUpdate) AddQpd(i int) *AppUpdate {
	au.mutation.AddQpd(i)
	return au
}

// SetQPS sets the Qps field.
func (au *AppUpdate) SetQPS(i int) *AppUpdate {
	au.mutation.ResetQPS()
	au.mutation.SetQPS(i)
	return au
}

// AddQPS adds i to Qps.
func (au *AppUpdate) AddQPS(i int) *AppUpdate {
	au.mutation.AddQPS(i)
	return au
}

// SetCreateAt sets the create_at field.
func (au *AppUpdate) SetCreateAt(t time.Time) *AppUpdate {
	au.mutation.SetCreateAt(t)
	return au
}

// SetUpdateAt sets the update_at field.
func (au *AppUpdate) SetUpdateAt(t time.Time) *AppUpdate {
	au.mutation.SetUpdateAt(t)
	return au
}

// SetIsDelete sets the is_delete field.
func (au *AppUpdate) SetIsDelete(i int8) *AppUpdate {
	au.mutation.ResetIsDelete()
	au.mutation.SetIsDelete(i)
	return au
}

// AddIsDelete adds i to is_delete.
func (au *AppUpdate) AddIsDelete(i int8) *AppUpdate {
	au.mutation.AddIsDelete(i)
	return au
}

// Mutation returns the AppMutation object of the builder.
func (au *AppUpdate) Mutation() *AppMutation {
	return au.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (au *AppUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AppUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AppUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AppUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AppUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   app.Table,
			Columns: app.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: app.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldAppID,
		})
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldName,
		})
	}
	if value, ok := au.mutation.Secret(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldSecret,
		})
	}
	if value, ok := au.mutation.WhiteIps(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldWhiteIps,
		})
	}
	if value, ok := au.mutation.Qpd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: app.FieldQpd,
		})
	}
	if value, ok := au.mutation.AddedQpd(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: app.FieldQpd,
		})
	}
	if value, ok := au.mutation.QPS(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: app.FieldQPS,
		})
	}
	if value, ok := au.mutation.AddedQPS(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: app.FieldQPS,
		})
	}
	if value, ok := au.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: app.FieldCreateAt,
		})
	}
	if value, ok := au.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: app.FieldUpdateAt,
		})
	}
	if value, ok := au.mutation.IsDelete(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: app.FieldIsDelete,
		})
	}
	if value, ok := au.mutation.AddedIsDelete(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: app.FieldIsDelete,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{app.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AppUpdateOne is the builder for updating a single App entity.
type AppUpdateOne struct {
	config
	hooks    []Hook
	mutation *AppMutation
}

// SetAppID sets the app_id field.
func (auo *AppUpdateOne) SetAppID(s string) *AppUpdateOne {
	auo.mutation.SetAppID(s)
	return auo
}

// SetName sets the name field.
func (auo *AppUpdateOne) SetName(s string) *AppUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetSecret sets the secret field.
func (auo *AppUpdateOne) SetSecret(s string) *AppUpdateOne {
	auo.mutation.SetSecret(s)
	return auo
}

// SetWhiteIps sets the white_ips field.
func (auo *AppUpdateOne) SetWhiteIps(s string) *AppUpdateOne {
	auo.mutation.SetWhiteIps(s)
	return auo
}

// SetQpd sets the qpd field.
func (auo *AppUpdateOne) SetQpd(i int) *AppUpdateOne {
	auo.mutation.ResetQpd()
	auo.mutation.SetQpd(i)
	return auo
}

// AddQpd adds i to qpd.
func (auo *AppUpdateOne) AddQpd(i int) *AppUpdateOne {
	auo.mutation.AddQpd(i)
	return auo
}

// SetQPS sets the Qps field.
func (auo *AppUpdateOne) SetQPS(i int) *AppUpdateOne {
	auo.mutation.ResetQPS()
	auo.mutation.SetQPS(i)
	return auo
}

// AddQPS adds i to Qps.
func (auo *AppUpdateOne) AddQPS(i int) *AppUpdateOne {
	auo.mutation.AddQPS(i)
	return auo
}

// SetCreateAt sets the create_at field.
func (auo *AppUpdateOne) SetCreateAt(t time.Time) *AppUpdateOne {
	auo.mutation.SetCreateAt(t)
	return auo
}

// SetUpdateAt sets the update_at field.
func (auo *AppUpdateOne) SetUpdateAt(t time.Time) *AppUpdateOne {
	auo.mutation.SetUpdateAt(t)
	return auo
}

// SetIsDelete sets the is_delete field.
func (auo *AppUpdateOne) SetIsDelete(i int8) *AppUpdateOne {
	auo.mutation.ResetIsDelete()
	auo.mutation.SetIsDelete(i)
	return auo
}

// AddIsDelete adds i to is_delete.
func (auo *AppUpdateOne) AddIsDelete(i int8) *AppUpdateOne {
	auo.mutation.AddIsDelete(i)
	return auo
}

// Mutation returns the AppMutation object of the builder.
func (auo *AppUpdateOne) Mutation() *AppMutation {
	return auo.mutation
}

// Save executes the query and returns the updated entity.
func (auo *AppUpdateOne) Save(ctx context.Context) (*App, error) {
	var (
		err  error
		node *App
	)
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AppUpdateOne) SaveX(ctx context.Context) *App {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AppUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AppUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AppUpdateOne) sqlSave(ctx context.Context) (_node *App, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   app.Table,
			Columns: app.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: app.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing App.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := auo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldAppID,
		})
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldName,
		})
	}
	if value, ok := auo.mutation.Secret(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldSecret,
		})
	}
	if value, ok := auo.mutation.WhiteIps(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: app.FieldWhiteIps,
		})
	}
	if value, ok := auo.mutation.Qpd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: app.FieldQpd,
		})
	}
	if value, ok := auo.mutation.AddedQpd(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: app.FieldQpd,
		})
	}
	if value, ok := auo.mutation.QPS(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: app.FieldQPS,
		})
	}
	if value, ok := auo.mutation.AddedQPS(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: app.FieldQPS,
		})
	}
	if value, ok := auo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: app.FieldCreateAt,
		})
	}
	if value, ok := auo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: app.FieldUpdateAt,
		})
	}
	if value, ok := auo.mutation.IsDelete(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: app.FieldIsDelete,
		})
	}
	if value, ok := auo.mutation.AddedIsDelete(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: app.FieldIsDelete,
		})
	}
	_node = &App{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{app.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
