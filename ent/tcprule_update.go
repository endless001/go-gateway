// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-gateway/ent/predicate"
	"go-gateway/ent/tcprule"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// TcpRuleUpdate is the builder for updating TcpRule entities.
type TcpRuleUpdate struct {
	config
	hooks    []Hook
	mutation *TcpRuleMutation
}

// Where adds a new predicate for the builder.
func (tru *TcpRuleUpdate) Where(ps ...predicate.TcpRule) *TcpRuleUpdate {
	tru.mutation.predicates = append(tru.mutation.predicates, ps...)
	return tru
}

// SetServiceID sets the service_id field.
func (tru *TcpRuleUpdate) SetServiceID(i int64) *TcpRuleUpdate {
	tru.mutation.ResetServiceID()
	tru.mutation.SetServiceID(i)
	return tru
}

// AddServiceID adds i to service_id.
func (tru *TcpRuleUpdate) AddServiceID(i int64) *TcpRuleUpdate {
	tru.mutation.AddServiceID(i)
	return tru
}

// SetPort sets the Port field.
func (tru *TcpRuleUpdate) SetPort(i int) *TcpRuleUpdate {
	tru.mutation.ResetPort()
	tru.mutation.SetPort(i)
	return tru
}

// AddPort adds i to Port.
func (tru *TcpRuleUpdate) AddPort(i int) *TcpRuleUpdate {
	tru.mutation.AddPort(i)
	return tru
}

// Mutation returns the TcpRuleMutation object of the builder.
func (tru *TcpRuleUpdate) Mutation() *TcpRuleMutation {
	return tru.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (tru *TcpRuleUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tru.hooks) == 0 {
		affected, err = tru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TcpRuleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tru.mutation = mutation
			affected, err = tru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tru.hooks) - 1; i >= 0; i-- {
			mut = tru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tru *TcpRuleUpdate) SaveX(ctx context.Context) int {
	affected, err := tru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tru *TcpRuleUpdate) Exec(ctx context.Context) error {
	_, err := tru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tru *TcpRuleUpdate) ExecX(ctx context.Context) {
	if err := tru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tru *TcpRuleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tcprule.Table,
			Columns: tcprule.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: tcprule.FieldID,
			},
		},
	}
	if ps := tru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tru.mutation.ServiceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tcprule.FieldServiceID,
		})
	}
	if value, ok := tru.mutation.AddedServiceID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tcprule.FieldServiceID,
		})
	}
	if value, ok := tru.mutation.Port(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tcprule.FieldPort,
		})
	}
	if value, ok := tru.mutation.AddedPort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tcprule.FieldPort,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tcprule.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TcpRuleUpdateOne is the builder for updating a single TcpRule entity.
type TcpRuleUpdateOne struct {
	config
	hooks    []Hook
	mutation *TcpRuleMutation
}

// SetServiceID sets the service_id field.
func (truo *TcpRuleUpdateOne) SetServiceID(i int64) *TcpRuleUpdateOne {
	truo.mutation.ResetServiceID()
	truo.mutation.SetServiceID(i)
	return truo
}

// AddServiceID adds i to service_id.
func (truo *TcpRuleUpdateOne) AddServiceID(i int64) *TcpRuleUpdateOne {
	truo.mutation.AddServiceID(i)
	return truo
}

// SetPort sets the Port field.
func (truo *TcpRuleUpdateOne) SetPort(i int) *TcpRuleUpdateOne {
	truo.mutation.ResetPort()
	truo.mutation.SetPort(i)
	return truo
}

// AddPort adds i to Port.
func (truo *TcpRuleUpdateOne) AddPort(i int) *TcpRuleUpdateOne {
	truo.mutation.AddPort(i)
	return truo
}

// Mutation returns the TcpRuleMutation object of the builder.
func (truo *TcpRuleUpdateOne) Mutation() *TcpRuleMutation {
	return truo.mutation
}

// Save executes the query and returns the updated entity.
func (truo *TcpRuleUpdateOne) Save(ctx context.Context) (*TcpRule, error) {
	var (
		err  error
		node *TcpRule
	)
	if len(truo.hooks) == 0 {
		node, err = truo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TcpRuleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			truo.mutation = mutation
			node, err = truo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(truo.hooks) - 1; i >= 0; i-- {
			mut = truo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, truo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (truo *TcpRuleUpdateOne) SaveX(ctx context.Context) *TcpRule {
	node, err := truo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (truo *TcpRuleUpdateOne) Exec(ctx context.Context) error {
	_, err := truo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (truo *TcpRuleUpdateOne) ExecX(ctx context.Context) {
	if err := truo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (truo *TcpRuleUpdateOne) sqlSave(ctx context.Context) (_node *TcpRule, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tcprule.Table,
			Columns: tcprule.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: tcprule.FieldID,
			},
		},
	}
	id, ok := truo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TcpRule.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := truo.mutation.ServiceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tcprule.FieldServiceID,
		})
	}
	if value, ok := truo.mutation.AddedServiceID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: tcprule.FieldServiceID,
		})
	}
	if value, ok := truo.mutation.Port(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tcprule.FieldPort,
		})
	}
	if value, ok := truo.mutation.AddedPort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tcprule.FieldPort,
		})
	}
	_node = &TcpRule{config: truo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, truo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tcprule.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
