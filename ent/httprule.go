// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-gateway/ent/httprule"
	"strings"

	"github.com/facebook/ent/dialect/sql"
)

// HttpRule is the model entity for the HttpRule schema.
type HttpRule struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// ServiceID holds the value of the "service_id" field.
	ServiceID int64 `json:"service_id,omitempty"`
	// RuleType holds the value of the "rule_type" field.
	RuleType int `json:"rule_type,omitempty"`
	// Rule holds the value of the "rule" field.
	Rule string `json:"rule,omitempty"`
	// NeedHTTPS holds the value of the "need_https" field.
	NeedHTTPS int `json:"need_https,omitempty"`
	// NeedWebsocket holds the value of the "need_websocket" field.
	NeedWebsocket int `json:"need_websocket,omitempty"`
	// NeedStripURI holds the value of the "need_strip_uri" field.
	NeedStripURI int `json:"need_strip_uri,omitempty"`
	// URLRewrite holds the value of the "url_rewrite" field.
	URLRewrite string `json:"url_rewrite,omitempty"`
	// HeaderTransfor holds the value of the "header_transfor" field.
	HeaderTransfor string `json:"header_transfor,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HttpRule) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullInt64{},  // service_id
		&sql.NullInt64{},  // rule_type
		&sql.NullString{}, // rule
		&sql.NullInt64{},  // need_https
		&sql.NullInt64{},  // need_websocket
		&sql.NullInt64{},  // need_strip_uri
		&sql.NullString{}, // url_rewrite
		&sql.NullString{}, // header_transfor
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HttpRule fields.
func (hr *HttpRule) assignValues(values ...interface{}) error {
	if m, n := len(values), len(httprule.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	hr.ID = int64(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field service_id", values[0])
	} else if value.Valid {
		hr.ServiceID = value.Int64
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field rule_type", values[1])
	} else if value.Valid {
		hr.RuleType = int(value.Int64)
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field rule", values[2])
	} else if value.Valid {
		hr.Rule = value.String
	}
	if value, ok := values[3].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field need_https", values[3])
	} else if value.Valid {
		hr.NeedHTTPS = int(value.Int64)
	}
	if value, ok := values[4].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field need_websocket", values[4])
	} else if value.Valid {
		hr.NeedWebsocket = int(value.Int64)
	}
	if value, ok := values[5].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field need_strip_uri", values[5])
	} else if value.Valid {
		hr.NeedStripURI = int(value.Int64)
	}
	if value, ok := values[6].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field url_rewrite", values[6])
	} else if value.Valid {
		hr.URLRewrite = value.String
	}
	if value, ok := values[7].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field header_transfor", values[7])
	} else if value.Valid {
		hr.HeaderTransfor = value.String
	}
	return nil
}

// Update returns a builder for updating this HttpRule.
// Note that, you need to call HttpRule.Unwrap() before calling this method, if this HttpRule
// was returned from a transaction, and the transaction was committed or rolled back.
func (hr *HttpRule) Update() *HttpRuleUpdateOne {
	return (&HttpRuleClient{config: hr.config}).UpdateOne(hr)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (hr *HttpRule) Unwrap() *HttpRule {
	tx, ok := hr.config.driver.(*txDriver)
	if !ok {
		panic("ent: HttpRule is not a transactional entity")
	}
	hr.config.driver = tx.drv
	return hr
}

// String implements the fmt.Stringer.
func (hr *HttpRule) String() string {
	var builder strings.Builder
	builder.WriteString("HttpRule(")
	builder.WriteString(fmt.Sprintf("id=%v", hr.ID))
	builder.WriteString(", service_id=")
	builder.WriteString(fmt.Sprintf("%v", hr.ServiceID))
	builder.WriteString(", rule_type=")
	builder.WriteString(fmt.Sprintf("%v", hr.RuleType))
	builder.WriteString(", rule=")
	builder.WriteString(hr.Rule)
	builder.WriteString(", need_https=")
	builder.WriteString(fmt.Sprintf("%v", hr.NeedHTTPS))
	builder.WriteString(", need_websocket=")
	builder.WriteString(fmt.Sprintf("%v", hr.NeedWebsocket))
	builder.WriteString(", need_strip_uri=")
	builder.WriteString(fmt.Sprintf("%v", hr.NeedStripURI))
	builder.WriteString(", url_rewrite=")
	builder.WriteString(hr.URLRewrite)
	builder.WriteString(", header_transfor=")
	builder.WriteString(hr.HeaderTransfor)
	builder.WriteByte(')')
	return builder.String()
}

// HttpRules is a parsable slice of HttpRule.
type HttpRules []*HttpRule

func (hr HttpRules) config(cfg config) {
	for _i := range hr {
		hr[_i].config = cfg
	}
}
