// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-gateway/internal/ent/httprule"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// HttpRuleCreate is the builder for creating a HttpRule entity.
type HttpRuleCreate struct {
	config
	mutation *HttpRuleMutation
	hooks    []Hook
}

// SetServiceID sets the service_id field.
func (hrc *HttpRuleCreate) SetServiceID(i int64) *HttpRuleCreate {
	hrc.mutation.SetServiceID(i)
	return hrc
}

// SetRuleType sets the rule_type field.
func (hrc *HttpRuleCreate) SetRuleType(i int) *HttpRuleCreate {
	hrc.mutation.SetRuleType(i)
	return hrc
}

// SetRule sets the rule field.
func (hrc *HttpRuleCreate) SetRule(s string) *HttpRuleCreate {
	hrc.mutation.SetRule(s)
	return hrc
}

// SetNeedHTTPS sets the need_https field.
func (hrc *HttpRuleCreate) SetNeedHTTPS(i int) *HttpRuleCreate {
	hrc.mutation.SetNeedHTTPS(i)
	return hrc
}

// SetNeedWebsocket sets the need_websocket field.
func (hrc *HttpRuleCreate) SetNeedWebsocket(i int) *HttpRuleCreate {
	hrc.mutation.SetNeedWebsocket(i)
	return hrc
}

// SetNeedStripURI sets the need_strip_uri field.
func (hrc *HttpRuleCreate) SetNeedStripURI(i int) *HttpRuleCreate {
	hrc.mutation.SetNeedStripURI(i)
	return hrc
}

// SetURLRewrite sets the url_rewrite field.
func (hrc *HttpRuleCreate) SetURLRewrite(s string) *HttpRuleCreate {
	hrc.mutation.SetURLRewrite(s)
	return hrc
}

// SetHeaderTransfor sets the header_transfor field.
func (hrc *HttpRuleCreate) SetHeaderTransfor(s string) *HttpRuleCreate {
	hrc.mutation.SetHeaderTransfor(s)
	return hrc
}

// SetID sets the id field.
func (hrc *HttpRuleCreate) SetID(i int64) *HttpRuleCreate {
	hrc.mutation.SetID(i)
	return hrc
}

// Mutation returns the HttpRuleMutation object of the builder.
func (hrc *HttpRuleCreate) Mutation() *HttpRuleMutation {
	return hrc.mutation
}

// Save creates the HttpRule in the database.
func (hrc *HttpRuleCreate) Save(ctx context.Context) (*HttpRule, error) {
	var (
		err  error
		node *HttpRule
	)
	if len(hrc.hooks) == 0 {
		if err = hrc.check(); err != nil {
			return nil, err
		}
		node, err = hrc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HttpRuleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = hrc.check(); err != nil {
				return nil, err
			}
			hrc.mutation = mutation
			node, err = hrc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(hrc.hooks) - 1; i >= 0; i-- {
			mut = hrc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, hrc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (hrc *HttpRuleCreate) SaveX(ctx context.Context) *HttpRule {
	v, err := hrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (hrc *HttpRuleCreate) check() error {
	if _, ok := hrc.mutation.ServiceID(); !ok {
		return &ValidationError{Name: "service_id", err: errors.New("ent: missing required field \"service_id\"")}
	}
	if _, ok := hrc.mutation.RuleType(); !ok {
		return &ValidationError{Name: "rule_type", err: errors.New("ent: missing required field \"rule_type\"")}
	}
	if _, ok := hrc.mutation.Rule(); !ok {
		return &ValidationError{Name: "rule", err: errors.New("ent: missing required field \"rule\"")}
	}
	if _, ok := hrc.mutation.NeedHTTPS(); !ok {
		return &ValidationError{Name: "need_https", err: errors.New("ent: missing required field \"need_https\"")}
	}
	if _, ok := hrc.mutation.NeedWebsocket(); !ok {
		return &ValidationError{Name: "need_websocket", err: errors.New("ent: missing required field \"need_websocket\"")}
	}
	if _, ok := hrc.mutation.NeedStripURI(); !ok {
		return &ValidationError{Name: "need_strip_uri", err: errors.New("ent: missing required field \"need_strip_uri\"")}
	}
	if _, ok := hrc.mutation.URLRewrite(); !ok {
		return &ValidationError{Name: "url_rewrite", err: errors.New("ent: missing required field \"url_rewrite\"")}
	}
	if _, ok := hrc.mutation.HeaderTransfor(); !ok {
		return &ValidationError{Name: "header_transfor", err: errors.New("ent: missing required field \"header_transfor\"")}
	}
	return nil
}

func (hrc *HttpRuleCreate) sqlSave(ctx context.Context) (*HttpRule, error) {
	_node, _spec := hrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hrc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (hrc *HttpRuleCreate) createSpec() (*HttpRule, *sqlgraph.CreateSpec) {
	var (
		_node = &HttpRule{config: hrc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: httprule.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: httprule.FieldID,
			},
		}
	)
	if id, ok := hrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := hrc.mutation.ServiceID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: httprule.FieldServiceID,
		})
		_node.ServiceID = value
	}
	if value, ok := hrc.mutation.RuleType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: httprule.FieldRuleType,
		})
		_node.RuleType = value
	}
	if value, ok := hrc.mutation.Rule(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: httprule.FieldRule,
		})
		_node.Rule = value
	}
	if value, ok := hrc.mutation.NeedHTTPS(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: httprule.FieldNeedHTTPS,
		})
		_node.NeedHTTPS = value
	}
	if value, ok := hrc.mutation.NeedWebsocket(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: httprule.FieldNeedWebsocket,
		})
		_node.NeedWebsocket = value
	}
	if value, ok := hrc.mutation.NeedStripURI(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: httprule.FieldNeedStripURI,
		})
		_node.NeedStripURI = value
	}
	if value, ok := hrc.mutation.URLRewrite(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: httprule.FieldURLRewrite,
		})
		_node.URLRewrite = value
	}
	if value, ok := hrc.mutation.HeaderTransfor(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: httprule.FieldHeaderTransfor,
		})
		_node.HeaderTransfor = value
	}
	return _node, _spec
}

// HttpRuleCreateBulk is the builder for creating a bulk of HttpRule entities.
type HttpRuleCreateBulk struct {
	config
	builders []*HttpRuleCreate
}

// Save creates the HttpRule entities in the database.
func (hrcb *HttpRuleCreateBulk) Save(ctx context.Context) ([]*HttpRule, error) {
	specs := make([]*sqlgraph.CreateSpec, len(hrcb.builders))
	nodes := make([]*HttpRule, len(hrcb.builders))
	mutators := make([]Mutator, len(hrcb.builders))
	for i := range hrcb.builders {
		func(i int, root context.Context) {
			builder := hrcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HttpRuleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hrcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hrcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				if nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (hrcb *HttpRuleCreateBulk) SaveX(ctx context.Context) []*HttpRule {
	v, err := hrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
