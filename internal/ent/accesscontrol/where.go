// Code generated by entc, DO NOT EDIT.

package accesscontrol

import (
	"go-gateway/internal/ent/predicate"

	"github.com/facebook/ent/dialect/sql"
)

// ID filters vertices based on their identifier.
func ID(id int64) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ServiceID applies equality check predicate on the "service_id" field. It's identical to ServiceIDEQ.
func ServiceID(v int64) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldServiceID), v))
	})
}

// OpenAuth applies equality check predicate on the "open_auth" field. It's identical to OpenAuthEQ.
func OpenAuth(v int) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOpenAuth), v))
	})
}

// BlackList applies equality check predicate on the "black_list" field. It's identical to BlackListEQ.
func BlackList(v string) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBlackList), v))
	})
}

// WhiteList applies equality check predicate on the "white_list" field. It's identical to WhiteListEQ.
func WhiteList(v string) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWhiteList), v))
	})
}

// WhiteHostName applies equality check predicate on the "white_host_name" field. It's identical to WhiteHostNameEQ.
func WhiteHostName(v string) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWhiteHostName), v))
	})
}

// ClientipFlowLimit applies equality check predicate on the "clientip_flow_limit" field. It's identical to ClientipFlowLimitEQ.
func ClientipFlowLimit(v int) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClientipFlowLimit), v))
	})
}

// ServiceFlowLimit applies equality check predicate on the "service_flow_limit" field. It's identical to ServiceFlowLimitEQ.
func ServiceFlowLimit(v int) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldServiceFlowLimit), v))
	})
}

// ServiceIDEQ applies the EQ predicate on the "service_id" field.
func ServiceIDEQ(v int64) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldServiceID), v))
	})
}

// ServiceIDNEQ applies the NEQ predicate on the "service_id" field.
func ServiceIDNEQ(v int64) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldServiceID), v))
	})
}

// ServiceIDIn applies the In predicate on the "service_id" field.
func ServiceIDIn(vs ...int64) predicate.AccessControl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccessControl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldServiceID), v...))
	})
}

// ServiceIDNotIn applies the NotIn predicate on the "service_id" field.
func ServiceIDNotIn(vs ...int64) predicate.AccessControl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccessControl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldServiceID), v...))
	})
}

// ServiceIDGT applies the GT predicate on the "service_id" field.
func ServiceIDGT(v int64) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldServiceID), v))
	})
}

// ServiceIDGTE applies the GTE predicate on the "service_id" field.
func ServiceIDGTE(v int64) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldServiceID), v))
	})
}

// ServiceIDLT applies the LT predicate on the "service_id" field.
func ServiceIDLT(v int64) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldServiceID), v))
	})
}

// ServiceIDLTE applies the LTE predicate on the "service_id" field.
func ServiceIDLTE(v int64) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldServiceID), v))
	})
}

// OpenAuthEQ applies the EQ predicate on the "open_auth" field.
func OpenAuthEQ(v int) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOpenAuth), v))
	})
}

// OpenAuthNEQ applies the NEQ predicate on the "open_auth" field.
func OpenAuthNEQ(v int) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOpenAuth), v))
	})
}

// OpenAuthIn applies the In predicate on the "open_auth" field.
func OpenAuthIn(vs ...int) predicate.AccessControl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccessControl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOpenAuth), v...))
	})
}

// OpenAuthNotIn applies the NotIn predicate on the "open_auth" field.
func OpenAuthNotIn(vs ...int) predicate.AccessControl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccessControl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOpenAuth), v...))
	})
}

// OpenAuthGT applies the GT predicate on the "open_auth" field.
func OpenAuthGT(v int) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOpenAuth), v))
	})
}

// OpenAuthGTE applies the GTE predicate on the "open_auth" field.
func OpenAuthGTE(v int) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOpenAuth), v))
	})
}

// OpenAuthLT applies the LT predicate on the "open_auth" field.
func OpenAuthLT(v int) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOpenAuth), v))
	})
}

// OpenAuthLTE applies the LTE predicate on the "open_auth" field.
func OpenAuthLTE(v int) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOpenAuth), v))
	})
}

// BlackListEQ applies the EQ predicate on the "black_list" field.
func BlackListEQ(v string) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBlackList), v))
	})
}

// BlackListNEQ applies the NEQ predicate on the "black_list" field.
func BlackListNEQ(v string) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBlackList), v))
	})
}

// BlackListIn applies the In predicate on the "black_list" field.
func BlackListIn(vs ...string) predicate.AccessControl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccessControl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBlackList), v...))
	})
}

// BlackListNotIn applies the NotIn predicate on the "black_list" field.
func BlackListNotIn(vs ...string) predicate.AccessControl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccessControl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBlackList), v...))
	})
}

// BlackListGT applies the GT predicate on the "black_list" field.
func BlackListGT(v string) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBlackList), v))
	})
}

// BlackListGTE applies the GTE predicate on the "black_list" field.
func BlackListGTE(v string) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBlackList), v))
	})
}

// BlackListLT applies the LT predicate on the "black_list" field.
func BlackListLT(v string) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBlackList), v))
	})
}

// BlackListLTE applies the LTE predicate on the "black_list" field.
func BlackListLTE(v string) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBlackList), v))
	})
}

// BlackListContains applies the Contains predicate on the "black_list" field.
func BlackListContains(v string) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBlackList), v))
	})
}

// BlackListHasPrefix applies the HasPrefix predicate on the "black_list" field.
func BlackListHasPrefix(v string) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBlackList), v))
	})
}

// BlackListHasSuffix applies the HasSuffix predicate on the "black_list" field.
func BlackListHasSuffix(v string) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBlackList), v))
	})
}

// BlackListEqualFold applies the EqualFold predicate on the "black_list" field.
func BlackListEqualFold(v string) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBlackList), v))
	})
}

// BlackListContainsFold applies the ContainsFold predicate on the "black_list" field.
func BlackListContainsFold(v string) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBlackList), v))
	})
}

// WhiteListEQ applies the EQ predicate on the "white_list" field.
func WhiteListEQ(v string) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWhiteList), v))
	})
}

// WhiteListNEQ applies the NEQ predicate on the "white_list" field.
func WhiteListNEQ(v string) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWhiteList), v))
	})
}

// WhiteListIn applies the In predicate on the "white_list" field.
func WhiteListIn(vs ...string) predicate.AccessControl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccessControl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWhiteList), v...))
	})
}

// WhiteListNotIn applies the NotIn predicate on the "white_list" field.
func WhiteListNotIn(vs ...string) predicate.AccessControl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccessControl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWhiteList), v...))
	})
}

// WhiteListGT applies the GT predicate on the "white_list" field.
func WhiteListGT(v string) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWhiteList), v))
	})
}

// WhiteListGTE applies the GTE predicate on the "white_list" field.
func WhiteListGTE(v string) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWhiteList), v))
	})
}

// WhiteListLT applies the LT predicate on the "white_list" field.
func WhiteListLT(v string) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWhiteList), v))
	})
}

// WhiteListLTE applies the LTE predicate on the "white_list" field.
func WhiteListLTE(v string) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWhiteList), v))
	})
}

// WhiteListContains applies the Contains predicate on the "white_list" field.
func WhiteListContains(v string) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWhiteList), v))
	})
}

// WhiteListHasPrefix applies the HasPrefix predicate on the "white_list" field.
func WhiteListHasPrefix(v string) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWhiteList), v))
	})
}

// WhiteListHasSuffix applies the HasSuffix predicate on the "white_list" field.
func WhiteListHasSuffix(v string) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWhiteList), v))
	})
}

// WhiteListEqualFold applies the EqualFold predicate on the "white_list" field.
func WhiteListEqualFold(v string) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWhiteList), v))
	})
}

// WhiteListContainsFold applies the ContainsFold predicate on the "white_list" field.
func WhiteListContainsFold(v string) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWhiteList), v))
	})
}

// WhiteHostNameEQ applies the EQ predicate on the "white_host_name" field.
func WhiteHostNameEQ(v string) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWhiteHostName), v))
	})
}

// WhiteHostNameNEQ applies the NEQ predicate on the "white_host_name" field.
func WhiteHostNameNEQ(v string) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWhiteHostName), v))
	})
}

// WhiteHostNameIn applies the In predicate on the "white_host_name" field.
func WhiteHostNameIn(vs ...string) predicate.AccessControl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccessControl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWhiteHostName), v...))
	})
}

// WhiteHostNameNotIn applies the NotIn predicate on the "white_host_name" field.
func WhiteHostNameNotIn(vs ...string) predicate.AccessControl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccessControl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWhiteHostName), v...))
	})
}

// WhiteHostNameGT applies the GT predicate on the "white_host_name" field.
func WhiteHostNameGT(v string) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWhiteHostName), v))
	})
}

// WhiteHostNameGTE applies the GTE predicate on the "white_host_name" field.
func WhiteHostNameGTE(v string) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWhiteHostName), v))
	})
}

// WhiteHostNameLT applies the LT predicate on the "white_host_name" field.
func WhiteHostNameLT(v string) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWhiteHostName), v))
	})
}

// WhiteHostNameLTE applies the LTE predicate on the "white_host_name" field.
func WhiteHostNameLTE(v string) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWhiteHostName), v))
	})
}

// WhiteHostNameContains applies the Contains predicate on the "white_host_name" field.
func WhiteHostNameContains(v string) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWhiteHostName), v))
	})
}

// WhiteHostNameHasPrefix applies the HasPrefix predicate on the "white_host_name" field.
func WhiteHostNameHasPrefix(v string) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWhiteHostName), v))
	})
}

// WhiteHostNameHasSuffix applies the HasSuffix predicate on the "white_host_name" field.
func WhiteHostNameHasSuffix(v string) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWhiteHostName), v))
	})
}

// WhiteHostNameEqualFold applies the EqualFold predicate on the "white_host_name" field.
func WhiteHostNameEqualFold(v string) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWhiteHostName), v))
	})
}

// WhiteHostNameContainsFold applies the ContainsFold predicate on the "white_host_name" field.
func WhiteHostNameContainsFold(v string) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWhiteHostName), v))
	})
}

// ClientipFlowLimitEQ applies the EQ predicate on the "clientip_flow_limit" field.
func ClientipFlowLimitEQ(v int) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClientipFlowLimit), v))
	})
}

// ClientipFlowLimitNEQ applies the NEQ predicate on the "clientip_flow_limit" field.
func ClientipFlowLimitNEQ(v int) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClientipFlowLimit), v))
	})
}

// ClientipFlowLimitIn applies the In predicate on the "clientip_flow_limit" field.
func ClientipFlowLimitIn(vs ...int) predicate.AccessControl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccessControl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldClientipFlowLimit), v...))
	})
}

// ClientipFlowLimitNotIn applies the NotIn predicate on the "clientip_flow_limit" field.
func ClientipFlowLimitNotIn(vs ...int) predicate.AccessControl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccessControl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldClientipFlowLimit), v...))
	})
}

// ClientipFlowLimitGT applies the GT predicate on the "clientip_flow_limit" field.
func ClientipFlowLimitGT(v int) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClientipFlowLimit), v))
	})
}

// ClientipFlowLimitGTE applies the GTE predicate on the "clientip_flow_limit" field.
func ClientipFlowLimitGTE(v int) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClientipFlowLimit), v))
	})
}

// ClientipFlowLimitLT applies the LT predicate on the "clientip_flow_limit" field.
func ClientipFlowLimitLT(v int) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClientipFlowLimit), v))
	})
}

// ClientipFlowLimitLTE applies the LTE predicate on the "clientip_flow_limit" field.
func ClientipFlowLimitLTE(v int) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClientipFlowLimit), v))
	})
}

// ServiceFlowLimitEQ applies the EQ predicate on the "service_flow_limit" field.
func ServiceFlowLimitEQ(v int) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldServiceFlowLimit), v))
	})
}

// ServiceFlowLimitNEQ applies the NEQ predicate on the "service_flow_limit" field.
func ServiceFlowLimitNEQ(v int) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldServiceFlowLimit), v))
	})
}

// ServiceFlowLimitIn applies the In predicate on the "service_flow_limit" field.
func ServiceFlowLimitIn(vs ...int) predicate.AccessControl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccessControl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldServiceFlowLimit), v...))
	})
}

// ServiceFlowLimitNotIn applies the NotIn predicate on the "service_flow_limit" field.
func ServiceFlowLimitNotIn(vs ...int) predicate.AccessControl {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccessControl(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldServiceFlowLimit), v...))
	})
}

// ServiceFlowLimitGT applies the GT predicate on the "service_flow_limit" field.
func ServiceFlowLimitGT(v int) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldServiceFlowLimit), v))
	})
}

// ServiceFlowLimitGTE applies the GTE predicate on the "service_flow_limit" field.
func ServiceFlowLimitGTE(v int) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldServiceFlowLimit), v))
	})
}

// ServiceFlowLimitLT applies the LT predicate on the "service_flow_limit" field.
func ServiceFlowLimitLT(v int) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldServiceFlowLimit), v))
	})
}

// ServiceFlowLimitLTE applies the LTE predicate on the "service_flow_limit" field.
func ServiceFlowLimitLTE(v int) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldServiceFlowLimit), v))
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.AccessControl) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.AccessControl) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AccessControl) predicate.AccessControl {
	return predicate.AccessControl(func(s *sql.Selector) {
		p(s.Not())
	})
}
