// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-gateway/internal/ent/predicate"
	"go-gateway/internal/ent/serviceinfo"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// ServiceInfoDelete is the builder for deleting a ServiceInfo entity.
type ServiceInfoDelete struct {
	config
	hooks    []Hook
	mutation *ServiceInfoMutation
}

// Where adds a new predicate to the delete builder.
func (sid *ServiceInfoDelete) Where(ps ...predicate.ServiceInfo) *ServiceInfoDelete {
	sid.mutation.predicates = append(sid.mutation.predicates, ps...)
	return sid
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (sid *ServiceInfoDelete) Exec(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(sid.hooks) == 0 {
		affected, err = sid.sqlExec(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ServiceInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sid.mutation = mutation
			affected, err = sid.sqlExec(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(sid.hooks) - 1; i >= 0; i-- {
			mut = sid.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sid.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// ExecX is like Exec, but panics if an error occurs.
func (sid *ServiceInfoDelete) ExecX(ctx context.Context) int {
	n, err := sid.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (sid *ServiceInfoDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := &sqlgraph.DeleteSpec{
		Node: &sqlgraph.NodeSpec{
			Table: serviceinfo.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: serviceinfo.FieldID,
			},
		},
	}
	if ps := sid.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return sqlgraph.DeleteNodes(ctx, sid.driver, _spec)
}

// ServiceInfoDeleteOne is the builder for deleting a single ServiceInfo entity.
type ServiceInfoDeleteOne struct {
	sid *ServiceInfoDelete
}

// Exec executes the deletion query.
func (sido *ServiceInfoDeleteOne) Exec(ctx context.Context) error {
	n, err := sido.sid.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{serviceinfo.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (sido *ServiceInfoDeleteOne) ExecX(ctx context.Context) {
	sido.sid.ExecX(ctx)
}
