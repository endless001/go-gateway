// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-gateway/internal/ent/predicate"
	"go-gateway/internal/ent/tenant"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// TenantUpdate is the builder for updating Tenant entities.
type TenantUpdate struct {
	config
	hooks    []Hook
	mutation *TenantMutation
}

// Where adds a new predicate for the builder.
func (tu *TenantUpdate) Where(ps ...predicate.Tenant) *TenantUpdate {
	tu.mutation.predicates = append(tu.mutation.predicates, ps...)
	return tu
}

// SetAppID sets the app_id field.
func (tu *TenantUpdate) SetAppID(s string) *TenantUpdate {
	tu.mutation.SetAppID(s)
	return tu
}

// SetName sets the name field.
func (tu *TenantUpdate) SetName(s string) *TenantUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetSecret sets the secret field.
func (tu *TenantUpdate) SetSecret(s string) *TenantUpdate {
	tu.mutation.SetSecret(s)
	return tu
}

// SetWhiteIps sets the white_ips field.
func (tu *TenantUpdate) SetWhiteIps(s string) *TenantUpdate {
	tu.mutation.SetWhiteIps(s)
	return tu
}

// SetQpd sets the qpd field.
func (tu *TenantUpdate) SetQpd(i int) *TenantUpdate {
	tu.mutation.ResetQpd()
	tu.mutation.SetQpd(i)
	return tu
}

// AddQpd adds i to qpd.
func (tu *TenantUpdate) AddQpd(i int) *TenantUpdate {
	tu.mutation.AddQpd(i)
	return tu
}

// SetQPS sets the qps field.
func (tu *TenantUpdate) SetQPS(i int) *TenantUpdate {
	tu.mutation.ResetQPS()
	tu.mutation.SetQPS(i)
	return tu
}

// AddQPS adds i to qps.
func (tu *TenantUpdate) AddQPS(i int) *TenantUpdate {
	tu.mutation.AddQPS(i)
	return tu
}

// SetCreateAt sets the create_at field.
func (tu *TenantUpdate) SetCreateAt(t time.Time) *TenantUpdate {
	tu.mutation.SetCreateAt(t)
	return tu
}

// SetUpdateAt sets the update_at field.
func (tu *TenantUpdate) SetUpdateAt(t time.Time) *TenantUpdate {
	tu.mutation.SetUpdateAt(t)
	return tu
}

// SetIsDelete sets the is_delete field.
func (tu *TenantUpdate) SetIsDelete(i int8) *TenantUpdate {
	tu.mutation.ResetIsDelete()
	tu.mutation.SetIsDelete(i)
	return tu
}

// AddIsDelete adds i to is_delete.
func (tu *TenantUpdate) AddIsDelete(i int8) *TenantUpdate {
	tu.mutation.AddIsDelete(i)
	return tu
}

// Mutation returns the TenantMutation object of the builder.
func (tu *TenantUpdate) Mutation() *TenantMutation {
	return tu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (tu *TenantUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tu.hooks) == 0 {
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TenantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TenantUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TenantUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TenantUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TenantUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tenant.Table,
			Columns: tenant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: tenant.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tenant.FieldAppID,
		})
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tenant.FieldName,
		})
	}
	if value, ok := tu.mutation.Secret(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tenant.FieldSecret,
		})
	}
	if value, ok := tu.mutation.WhiteIps(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tenant.FieldWhiteIps,
		})
	}
	if value, ok := tu.mutation.Qpd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tenant.FieldQpd,
		})
	}
	if value, ok := tu.mutation.AddedQpd(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tenant.FieldQpd,
		})
	}
	if value, ok := tu.mutation.QPS(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tenant.FieldQPS,
		})
	}
	if value, ok := tu.mutation.AddedQPS(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tenant.FieldQPS,
		})
	}
	if value, ok := tu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tenant.FieldCreateAt,
		})
	}
	if value, ok := tu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tenant.FieldUpdateAt,
		})
	}
	if value, ok := tu.mutation.IsDelete(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: tenant.FieldIsDelete,
		})
	}
	if value, ok := tu.mutation.AddedIsDelete(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: tenant.FieldIsDelete,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenant.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TenantUpdateOne is the builder for updating a single Tenant entity.
type TenantUpdateOne struct {
	config
	hooks    []Hook
	mutation *TenantMutation
}

// SetAppID sets the app_id field.
func (tuo *TenantUpdateOne) SetAppID(s string) *TenantUpdateOne {
	tuo.mutation.SetAppID(s)
	return tuo
}

// SetName sets the name field.
func (tuo *TenantUpdateOne) SetName(s string) *TenantUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetSecret sets the secret field.
func (tuo *TenantUpdateOne) SetSecret(s string) *TenantUpdateOne {
	tuo.mutation.SetSecret(s)
	return tuo
}

// SetWhiteIps sets the white_ips field.
func (tuo *TenantUpdateOne) SetWhiteIps(s string) *TenantUpdateOne {
	tuo.mutation.SetWhiteIps(s)
	return tuo
}

// SetQpd sets the qpd field.
func (tuo *TenantUpdateOne) SetQpd(i int) *TenantUpdateOne {
	tuo.mutation.ResetQpd()
	tuo.mutation.SetQpd(i)
	return tuo
}

// AddQpd adds i to qpd.
func (tuo *TenantUpdateOne) AddQpd(i int) *TenantUpdateOne {
	tuo.mutation.AddQpd(i)
	return tuo
}

// SetQPS sets the qps field.
func (tuo *TenantUpdateOne) SetQPS(i int) *TenantUpdateOne {
	tuo.mutation.ResetQPS()
	tuo.mutation.SetQPS(i)
	return tuo
}

// AddQPS adds i to qps.
func (tuo *TenantUpdateOne) AddQPS(i int) *TenantUpdateOne {
	tuo.mutation.AddQPS(i)
	return tuo
}

// SetCreateAt sets the create_at field.
func (tuo *TenantUpdateOne) SetCreateAt(t time.Time) *TenantUpdateOne {
	tuo.mutation.SetCreateAt(t)
	return tuo
}

// SetUpdateAt sets the update_at field.
func (tuo *TenantUpdateOne) SetUpdateAt(t time.Time) *TenantUpdateOne {
	tuo.mutation.SetUpdateAt(t)
	return tuo
}

// SetIsDelete sets the is_delete field.
func (tuo *TenantUpdateOne) SetIsDelete(i int8) *TenantUpdateOne {
	tuo.mutation.ResetIsDelete()
	tuo.mutation.SetIsDelete(i)
	return tuo
}

// AddIsDelete adds i to is_delete.
func (tuo *TenantUpdateOne) AddIsDelete(i int8) *TenantUpdateOne {
	tuo.mutation.AddIsDelete(i)
	return tuo
}

// Mutation returns the TenantMutation object of the builder.
func (tuo *TenantUpdateOne) Mutation() *TenantMutation {
	return tuo.mutation
}

// Save executes the query and returns the updated entity.
func (tuo *TenantUpdateOne) Save(ctx context.Context) (*Tenant, error) {
	var (
		err  error
		node *Tenant
	)
	if len(tuo.hooks) == 0 {
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TenantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			mut = tuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TenantUpdateOne) SaveX(ctx context.Context) *Tenant {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TenantUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TenantUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TenantUpdateOne) sqlSave(ctx context.Context) (_node *Tenant, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tenant.Table,
			Columns: tenant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: tenant.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Tenant.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := tuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tenant.FieldAppID,
		})
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tenant.FieldName,
		})
	}
	if value, ok := tuo.mutation.Secret(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tenant.FieldSecret,
		})
	}
	if value, ok := tuo.mutation.WhiteIps(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tenant.FieldWhiteIps,
		})
	}
	if value, ok := tuo.mutation.Qpd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tenant.FieldQpd,
		})
	}
	if value, ok := tuo.mutation.AddedQpd(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tenant.FieldQpd,
		})
	}
	if value, ok := tuo.mutation.QPS(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tenant.FieldQPS,
		})
	}
	if value, ok := tuo.mutation.AddedQPS(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tenant.FieldQPS,
		})
	}
	if value, ok := tuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tenant.FieldCreateAt,
		})
	}
	if value, ok := tuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tenant.FieldUpdateAt,
		})
	}
	if value, ok := tuo.mutation.IsDelete(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: tenant.FieldIsDelete,
		})
	}
	if value, ok := tuo.mutation.AddedIsDelete(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: tenant.FieldIsDelete,
		})
	}
	_node = &Tenant{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenant.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
