// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-gateway/internal/ent/serviceinfo"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// ServiceInfoCreate is the builder for creating a ServiceInfo entity.
type ServiceInfoCreate struct {
	config
	mutation *ServiceInfoMutation
	hooks    []Hook
}

// SetLoadType sets the load_type field.
func (sic *ServiceInfoCreate) SetLoadType(i int) *ServiceInfoCreate {
	sic.mutation.SetLoadType(i)
	return sic
}

// SetServiceName sets the service_name field.
func (sic *ServiceInfoCreate) SetServiceName(s string) *ServiceInfoCreate {
	sic.mutation.SetServiceName(s)
	return sic
}

// SetServiceDesc sets the service_desc field.
func (sic *ServiceInfoCreate) SetServiceDesc(s string) *ServiceInfoCreate {
	sic.mutation.SetServiceDesc(s)
	return sic
}

// SetCreateAt sets the create_at field.
func (sic *ServiceInfoCreate) SetCreateAt(t time.Time) *ServiceInfoCreate {
	sic.mutation.SetCreateAt(t)
	return sic
}

// SetUpdateAt sets the update_at field.
func (sic *ServiceInfoCreate) SetUpdateAt(t time.Time) *ServiceInfoCreate {
	sic.mutation.SetUpdateAt(t)
	return sic
}

// SetIsDelete sets the is_delete field.
func (sic *ServiceInfoCreate) SetIsDelete(i int8) *ServiceInfoCreate {
	sic.mutation.SetIsDelete(i)
	return sic
}

// SetID sets the id field.
func (sic *ServiceInfoCreate) SetID(i int64) *ServiceInfoCreate {
	sic.mutation.SetID(i)
	return sic
}

// Mutation returns the ServiceInfoMutation object of the builder.
func (sic *ServiceInfoCreate) Mutation() *ServiceInfoMutation {
	return sic.mutation
}

// Save creates the ServiceInfo in the database.
func (sic *ServiceInfoCreate) Save(ctx context.Context) (*ServiceInfo, error) {
	var (
		err  error
		node *ServiceInfo
	)
	if len(sic.hooks) == 0 {
		if err = sic.check(); err != nil {
			return nil, err
		}
		node, err = sic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ServiceInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sic.check(); err != nil {
				return nil, err
			}
			sic.mutation = mutation
			node, err = sic.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sic.hooks) - 1; i >= 0; i-- {
			mut = sic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sic *ServiceInfoCreate) SaveX(ctx context.Context) *ServiceInfo {
	v, err := sic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (sic *ServiceInfoCreate) check() error {
	if _, ok := sic.mutation.LoadType(); !ok {
		return &ValidationError{Name: "load_type", err: errors.New("ent: missing required field \"load_type\"")}
	}
	if _, ok := sic.mutation.ServiceName(); !ok {
		return &ValidationError{Name: "service_name", err: errors.New("ent: missing required field \"service_name\"")}
	}
	if _, ok := sic.mutation.ServiceDesc(); !ok {
		return &ValidationError{Name: "service_desc", err: errors.New("ent: missing required field \"service_desc\"")}
	}
	if _, ok := sic.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New("ent: missing required field \"create_at\"")}
	}
	if _, ok := sic.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New("ent: missing required field \"update_at\"")}
	}
	if _, ok := sic.mutation.IsDelete(); !ok {
		return &ValidationError{Name: "is_delete", err: errors.New("ent: missing required field \"is_delete\"")}
	}
	return nil
}

func (sic *ServiceInfoCreate) sqlSave(ctx context.Context) (*ServiceInfo, error) {
	_node, _spec := sic.createSpec()
	if err := sqlgraph.CreateNode(ctx, sic.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (sic *ServiceInfoCreate) createSpec() (*ServiceInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &ServiceInfo{config: sic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: serviceinfo.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: serviceinfo.FieldID,
			},
		}
	)
	if id, ok := sic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sic.mutation.LoadType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: serviceinfo.FieldLoadType,
		})
		_node.LoadType = value
	}
	if value, ok := sic.mutation.ServiceName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: serviceinfo.FieldServiceName,
		})
		_node.ServiceName = value
	}
	if value, ok := sic.mutation.ServiceDesc(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: serviceinfo.FieldServiceDesc,
		})
		_node.ServiceDesc = value
	}
	if value, ok := sic.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: serviceinfo.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := sic.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: serviceinfo.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := sic.mutation.IsDelete(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: serviceinfo.FieldIsDelete,
		})
		_node.IsDelete = value
	}
	return _node, _spec
}

// ServiceInfoCreateBulk is the builder for creating a bulk of ServiceInfo entities.
type ServiceInfoCreateBulk struct {
	config
	builders []*ServiceInfoCreate
}

// Save creates the ServiceInfo entities in the database.
func (sicb *ServiceInfoCreateBulk) Save(ctx context.Context) ([]*ServiceInfo, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sicb.builders))
	nodes := make([]*ServiceInfo, len(sicb.builders))
	mutators := make([]Mutator, len(sicb.builders))
	for i := range sicb.builders {
		func(i int, root context.Context) {
			builder := sicb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ServiceInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sicb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sicb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				if nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (sicb *ServiceInfoCreateBulk) SaveX(ctx context.Context) []*ServiceInfo {
	v, err := sicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
