// Code generated by entc, DO NOT EDIT.

package serviceinfo

import (
	"go-gateway/internal/ent/predicate"
	"time"

	"github.com/facebook/ent/dialect/sql"
)

// ID filters vertices based on their identifier.
func ID(id int64) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// LoadType applies equality check predicate on the "load_type" field. It's identical to LoadTypeEQ.
func LoadType(v int) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLoadType), v))
	})
}

// ServiceName applies equality check predicate on the "service_name" field. It's identical to ServiceNameEQ.
func ServiceName(v string) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldServiceName), v))
	})
}

// ServiceDesc applies equality check predicate on the "service_desc" field. It's identical to ServiceDescEQ.
func ServiceDesc(v string) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldServiceDesc), v))
	})
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v time.Time) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateAt), v))
	})
}

// UpdateAt applies equality check predicate on the "update_at" field. It's identical to UpdateAtEQ.
func UpdateAt(v time.Time) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateAt), v))
	})
}

// IsDelete applies equality check predicate on the "is_delete" field. It's identical to IsDeleteEQ.
func IsDelete(v int8) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDelete), v))
	})
}

// LoadTypeEQ applies the EQ predicate on the "load_type" field.
func LoadTypeEQ(v int) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLoadType), v))
	})
}

// LoadTypeNEQ applies the NEQ predicate on the "load_type" field.
func LoadTypeNEQ(v int) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLoadType), v))
	})
}

// LoadTypeIn applies the In predicate on the "load_type" field.
func LoadTypeIn(vs ...int) predicate.ServiceInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLoadType), v...))
	})
}

// LoadTypeNotIn applies the NotIn predicate on the "load_type" field.
func LoadTypeNotIn(vs ...int) predicate.ServiceInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLoadType), v...))
	})
}

// LoadTypeGT applies the GT predicate on the "load_type" field.
func LoadTypeGT(v int) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLoadType), v))
	})
}

// LoadTypeGTE applies the GTE predicate on the "load_type" field.
func LoadTypeGTE(v int) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLoadType), v))
	})
}

// LoadTypeLT applies the LT predicate on the "load_type" field.
func LoadTypeLT(v int) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLoadType), v))
	})
}

// LoadTypeLTE applies the LTE predicate on the "load_type" field.
func LoadTypeLTE(v int) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLoadType), v))
	})
}

// ServiceNameEQ applies the EQ predicate on the "service_name" field.
func ServiceNameEQ(v string) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldServiceName), v))
	})
}

// ServiceNameNEQ applies the NEQ predicate on the "service_name" field.
func ServiceNameNEQ(v string) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldServiceName), v))
	})
}

// ServiceNameIn applies the In predicate on the "service_name" field.
func ServiceNameIn(vs ...string) predicate.ServiceInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldServiceName), v...))
	})
}

// ServiceNameNotIn applies the NotIn predicate on the "service_name" field.
func ServiceNameNotIn(vs ...string) predicate.ServiceInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldServiceName), v...))
	})
}

// ServiceNameGT applies the GT predicate on the "service_name" field.
func ServiceNameGT(v string) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldServiceName), v))
	})
}

// ServiceNameGTE applies the GTE predicate on the "service_name" field.
func ServiceNameGTE(v string) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldServiceName), v))
	})
}

// ServiceNameLT applies the LT predicate on the "service_name" field.
func ServiceNameLT(v string) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldServiceName), v))
	})
}

// ServiceNameLTE applies the LTE predicate on the "service_name" field.
func ServiceNameLTE(v string) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldServiceName), v))
	})
}

// ServiceNameContains applies the Contains predicate on the "service_name" field.
func ServiceNameContains(v string) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldServiceName), v))
	})
}

// ServiceNameHasPrefix applies the HasPrefix predicate on the "service_name" field.
func ServiceNameHasPrefix(v string) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldServiceName), v))
	})
}

// ServiceNameHasSuffix applies the HasSuffix predicate on the "service_name" field.
func ServiceNameHasSuffix(v string) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldServiceName), v))
	})
}

// ServiceNameEqualFold applies the EqualFold predicate on the "service_name" field.
func ServiceNameEqualFold(v string) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldServiceName), v))
	})
}

// ServiceNameContainsFold applies the ContainsFold predicate on the "service_name" field.
func ServiceNameContainsFold(v string) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldServiceName), v))
	})
}

// ServiceDescEQ applies the EQ predicate on the "service_desc" field.
func ServiceDescEQ(v string) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldServiceDesc), v))
	})
}

// ServiceDescNEQ applies the NEQ predicate on the "service_desc" field.
func ServiceDescNEQ(v string) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldServiceDesc), v))
	})
}

// ServiceDescIn applies the In predicate on the "service_desc" field.
func ServiceDescIn(vs ...string) predicate.ServiceInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldServiceDesc), v...))
	})
}

// ServiceDescNotIn applies the NotIn predicate on the "service_desc" field.
func ServiceDescNotIn(vs ...string) predicate.ServiceInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldServiceDesc), v...))
	})
}

// ServiceDescGT applies the GT predicate on the "service_desc" field.
func ServiceDescGT(v string) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldServiceDesc), v))
	})
}

// ServiceDescGTE applies the GTE predicate on the "service_desc" field.
func ServiceDescGTE(v string) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldServiceDesc), v))
	})
}

// ServiceDescLT applies the LT predicate on the "service_desc" field.
func ServiceDescLT(v string) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldServiceDesc), v))
	})
}

// ServiceDescLTE applies the LTE predicate on the "service_desc" field.
func ServiceDescLTE(v string) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldServiceDesc), v))
	})
}

// ServiceDescContains applies the Contains predicate on the "service_desc" field.
func ServiceDescContains(v string) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldServiceDesc), v))
	})
}

// ServiceDescHasPrefix applies the HasPrefix predicate on the "service_desc" field.
func ServiceDescHasPrefix(v string) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldServiceDesc), v))
	})
}

// ServiceDescHasSuffix applies the HasSuffix predicate on the "service_desc" field.
func ServiceDescHasSuffix(v string) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldServiceDesc), v))
	})
}

// ServiceDescEqualFold applies the EqualFold predicate on the "service_desc" field.
func ServiceDescEqualFold(v string) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldServiceDesc), v))
	})
}

// ServiceDescContainsFold applies the ContainsFold predicate on the "service_desc" field.
func ServiceDescContainsFold(v string) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldServiceDesc), v))
	})
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v time.Time) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateAt), v))
	})
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v time.Time) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateAt), v))
	})
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...time.Time) predicate.ServiceInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateAt), v...))
	})
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...time.Time) predicate.ServiceInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateAt), v...))
	})
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v time.Time) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateAt), v))
	})
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v time.Time) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateAt), v))
	})
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v time.Time) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateAt), v))
	})
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v time.Time) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateAt), v))
	})
}

// UpdateAtEQ applies the EQ predicate on the "update_at" field.
func UpdateAtEQ(v time.Time) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtNEQ applies the NEQ predicate on the "update_at" field.
func UpdateAtNEQ(v time.Time) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtIn applies the In predicate on the "update_at" field.
func UpdateAtIn(vs ...time.Time) predicate.ServiceInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateAt), v...))
	})
}

// UpdateAtNotIn applies the NotIn predicate on the "update_at" field.
func UpdateAtNotIn(vs ...time.Time) predicate.ServiceInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateAt), v...))
	})
}

// UpdateAtGT applies the GT predicate on the "update_at" field.
func UpdateAtGT(v time.Time) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtGTE applies the GTE predicate on the "update_at" field.
func UpdateAtGTE(v time.Time) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtLT applies the LT predicate on the "update_at" field.
func UpdateAtLT(v time.Time) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtLTE applies the LTE predicate on the "update_at" field.
func UpdateAtLTE(v time.Time) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateAt), v))
	})
}

// IsDeleteEQ applies the EQ predicate on the "is_delete" field.
func IsDeleteEQ(v int8) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDelete), v))
	})
}

// IsDeleteNEQ applies the NEQ predicate on the "is_delete" field.
func IsDeleteNEQ(v int8) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsDelete), v))
	})
}

// IsDeleteIn applies the In predicate on the "is_delete" field.
func IsDeleteIn(vs ...int8) predicate.ServiceInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsDelete), v...))
	})
}

// IsDeleteNotIn applies the NotIn predicate on the "is_delete" field.
func IsDeleteNotIn(vs ...int8) predicate.ServiceInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsDelete), v...))
	})
}

// IsDeleteGT applies the GT predicate on the "is_delete" field.
func IsDeleteGT(v int8) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsDelete), v))
	})
}

// IsDeleteGTE applies the GTE predicate on the "is_delete" field.
func IsDeleteGTE(v int8) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsDelete), v))
	})
}

// IsDeleteLT applies the LT predicate on the "is_delete" field.
func IsDeleteLT(v int8) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsDelete), v))
	})
}

// IsDeleteLTE applies the LTE predicate on the "is_delete" field.
func IsDeleteLTE(v int8) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsDelete), v))
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.ServiceInfo) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.ServiceInfo) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ServiceInfo) predicate.ServiceInfo {
	return predicate.ServiceInfo(func(s *sql.Selector) {
		p(s.Not())
	})
}
