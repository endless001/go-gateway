// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-gateway/internal/ent/grpcrule"
	"go-gateway/internal/ent/predicate"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// GrpcRuleUpdate is the builder for updating GrpcRule entities.
type GrpcRuleUpdate struct {
	config
	hooks    []Hook
	mutation *GrpcRuleMutation
}

// Where adds a new predicate for the builder.
func (gru *GrpcRuleUpdate) Where(ps ...predicate.GrpcRule) *GrpcRuleUpdate {
	gru.mutation.predicates = append(gru.mutation.predicates, ps...)
	return gru
}

// SetServiceID sets the service_id field.
func (gru *GrpcRuleUpdate) SetServiceID(i int64) *GrpcRuleUpdate {
	gru.mutation.ResetServiceID()
	gru.mutation.SetServiceID(i)
	return gru
}

// AddServiceID adds i to service_id.
func (gru *GrpcRuleUpdate) AddServiceID(i int64) *GrpcRuleUpdate {
	gru.mutation.AddServiceID(i)
	return gru
}

// SetPort sets the Port field.
func (gru *GrpcRuleUpdate) SetPort(i int) *GrpcRuleUpdate {
	gru.mutation.ResetPort()
	gru.mutation.SetPort(i)
	return gru
}

// AddPort adds i to Port.
func (gru *GrpcRuleUpdate) AddPort(i int) *GrpcRuleUpdate {
	gru.mutation.AddPort(i)
	return gru
}

// SetHeaderTransfor sets the header_transfor field.
func (gru *GrpcRuleUpdate) SetHeaderTransfor(s string) *GrpcRuleUpdate {
	gru.mutation.SetHeaderTransfor(s)
	return gru
}

// Mutation returns the GrpcRuleMutation object of the builder.
func (gru *GrpcRuleUpdate) Mutation() *GrpcRuleMutation {
	return gru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gru *GrpcRuleUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(gru.hooks) == 0 {
		affected, err = gru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GrpcRuleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gru.mutation = mutation
			affected, err = gru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gru.hooks) - 1; i >= 0; i-- {
			mut = gru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gru *GrpcRuleUpdate) SaveX(ctx context.Context) int {
	affected, err := gru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gru *GrpcRuleUpdate) Exec(ctx context.Context) error {
	_, err := gru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gru *GrpcRuleUpdate) ExecX(ctx context.Context) {
	if err := gru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gru *GrpcRuleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   grpcrule.Table,
			Columns: grpcrule.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: grpcrule.FieldID,
			},
		},
	}
	if ps := gru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gru.mutation.ServiceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: grpcrule.FieldServiceID,
		})
	}
	if value, ok := gru.mutation.AddedServiceID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: grpcrule.FieldServiceID,
		})
	}
	if value, ok := gru.mutation.Port(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: grpcrule.FieldPort,
		})
	}
	if value, ok := gru.mutation.AddedPort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: grpcrule.FieldPort,
		})
	}
	if value, ok := gru.mutation.HeaderTransfor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: grpcrule.FieldHeaderTransfor,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{grpcrule.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// GrpcRuleUpdateOne is the builder for updating a single GrpcRule entity.
type GrpcRuleUpdateOne struct {
	config
	hooks    []Hook
	mutation *GrpcRuleMutation
}

// SetServiceID sets the service_id field.
func (gruo *GrpcRuleUpdateOne) SetServiceID(i int64) *GrpcRuleUpdateOne {
	gruo.mutation.ResetServiceID()
	gruo.mutation.SetServiceID(i)
	return gruo
}

// AddServiceID adds i to service_id.
func (gruo *GrpcRuleUpdateOne) AddServiceID(i int64) *GrpcRuleUpdateOne {
	gruo.mutation.AddServiceID(i)
	return gruo
}

// SetPort sets the Port field.
func (gruo *GrpcRuleUpdateOne) SetPort(i int) *GrpcRuleUpdateOne {
	gruo.mutation.ResetPort()
	gruo.mutation.SetPort(i)
	return gruo
}

// AddPort adds i to Port.
func (gruo *GrpcRuleUpdateOne) AddPort(i int) *GrpcRuleUpdateOne {
	gruo.mutation.AddPort(i)
	return gruo
}

// SetHeaderTransfor sets the header_transfor field.
func (gruo *GrpcRuleUpdateOne) SetHeaderTransfor(s string) *GrpcRuleUpdateOne {
	gruo.mutation.SetHeaderTransfor(s)
	return gruo
}

// Mutation returns the GrpcRuleMutation object of the builder.
func (gruo *GrpcRuleUpdateOne) Mutation() *GrpcRuleMutation {
	return gruo.mutation
}

// Save executes the query and returns the updated entity.
func (gruo *GrpcRuleUpdateOne) Save(ctx context.Context) (*GrpcRule, error) {
	var (
		err  error
		node *GrpcRule
	)
	if len(gruo.hooks) == 0 {
		node, err = gruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GrpcRuleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gruo.mutation = mutation
			node, err = gruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gruo.hooks) - 1; i >= 0; i-- {
			mut = gruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (gruo *GrpcRuleUpdateOne) SaveX(ctx context.Context) *GrpcRule {
	node, err := gruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gruo *GrpcRuleUpdateOne) Exec(ctx context.Context) error {
	_, err := gruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gruo *GrpcRuleUpdateOne) ExecX(ctx context.Context) {
	if err := gruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gruo *GrpcRuleUpdateOne) sqlSave(ctx context.Context) (_node *GrpcRule, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   grpcrule.Table,
			Columns: grpcrule.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: grpcrule.FieldID,
			},
		},
	}
	id, ok := gruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing GrpcRule.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := gruo.mutation.ServiceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: grpcrule.FieldServiceID,
		})
	}
	if value, ok := gruo.mutation.AddedServiceID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: grpcrule.FieldServiceID,
		})
	}
	if value, ok := gruo.mutation.Port(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: grpcrule.FieldPort,
		})
	}
	if value, ok := gruo.mutation.AddedPort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: grpcrule.FieldPort,
		})
	}
	if value, ok := gruo.mutation.HeaderTransfor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: grpcrule.FieldHeaderTransfor,
		})
	}
	_node = &GrpcRule{config: gruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, gruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{grpcrule.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
