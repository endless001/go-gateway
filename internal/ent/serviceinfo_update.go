// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"go-gateway/internal/ent/predicate"
	"go-gateway/internal/ent/serviceinfo"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// ServiceInfoUpdate is the builder for updating ServiceInfo entities.
type ServiceInfoUpdate struct {
	config
	hooks    []Hook
	mutation *ServiceInfoMutation
}

// Where adds a new predicate for the builder.
func (siu *ServiceInfoUpdate) Where(ps ...predicate.ServiceInfo) *ServiceInfoUpdate {
	siu.mutation.predicates = append(siu.mutation.predicates, ps...)
	return siu
}

// SetLoadType sets the load_type field.
func (siu *ServiceInfoUpdate) SetLoadType(i int) *ServiceInfoUpdate {
	siu.mutation.ResetLoadType()
	siu.mutation.SetLoadType(i)
	return siu
}

// AddLoadType adds i to load_type.
func (siu *ServiceInfoUpdate) AddLoadType(i int) *ServiceInfoUpdate {
	siu.mutation.AddLoadType(i)
	return siu
}

// SetServiceName sets the service_name field.
func (siu *ServiceInfoUpdate) SetServiceName(s string) *ServiceInfoUpdate {
	siu.mutation.SetServiceName(s)
	return siu
}

// SetServiceDesc sets the service_desc field.
func (siu *ServiceInfoUpdate) SetServiceDesc(s string) *ServiceInfoUpdate {
	siu.mutation.SetServiceDesc(s)
	return siu
}

// SetCreateAt sets the create_at field.
func (siu *ServiceInfoUpdate) SetCreateAt(t time.Time) *ServiceInfoUpdate {
	siu.mutation.SetCreateAt(t)
	return siu
}

// SetUpdateAt sets the update_at field.
func (siu *ServiceInfoUpdate) SetUpdateAt(t time.Time) *ServiceInfoUpdate {
	siu.mutation.SetUpdateAt(t)
	return siu
}

// SetIsDelete sets the is_delete field.
func (siu *ServiceInfoUpdate) SetIsDelete(i int8) *ServiceInfoUpdate {
	siu.mutation.ResetIsDelete()
	siu.mutation.SetIsDelete(i)
	return siu
}

// AddIsDelete adds i to is_delete.
func (siu *ServiceInfoUpdate) AddIsDelete(i int8) *ServiceInfoUpdate {
	siu.mutation.AddIsDelete(i)
	return siu
}

// Mutation returns the ServiceInfoMutation object of the builder.
func (siu *ServiceInfoUpdate) Mutation() *ServiceInfoMutation {
	return siu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (siu *ServiceInfoUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(siu.hooks) == 0 {
		affected, err = siu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ServiceInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			siu.mutation = mutation
			affected, err = siu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(siu.hooks) - 1; i >= 0; i-- {
			mut = siu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, siu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (siu *ServiceInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := siu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (siu *ServiceInfoUpdate) Exec(ctx context.Context) error {
	_, err := siu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (siu *ServiceInfoUpdate) ExecX(ctx context.Context) {
	if err := siu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (siu *ServiceInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   serviceinfo.Table,
			Columns: serviceinfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: serviceinfo.FieldID,
			},
		},
	}
	if ps := siu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := siu.mutation.LoadType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: serviceinfo.FieldLoadType,
		})
	}
	if value, ok := siu.mutation.AddedLoadType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: serviceinfo.FieldLoadType,
		})
	}
	if value, ok := siu.mutation.ServiceName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: serviceinfo.FieldServiceName,
		})
	}
	if value, ok := siu.mutation.ServiceDesc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: serviceinfo.FieldServiceDesc,
		})
	}
	if value, ok := siu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: serviceinfo.FieldCreateAt,
		})
	}
	if value, ok := siu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: serviceinfo.FieldUpdateAt,
		})
	}
	if value, ok := siu.mutation.IsDelete(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: serviceinfo.FieldIsDelete,
		})
	}
	if value, ok := siu.mutation.AddedIsDelete(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: serviceinfo.FieldIsDelete,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, siu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{serviceinfo.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ServiceInfoUpdateOne is the builder for updating a single ServiceInfo entity.
type ServiceInfoUpdateOne struct {
	config
	hooks    []Hook
	mutation *ServiceInfoMutation
}

// SetLoadType sets the load_type field.
func (siuo *ServiceInfoUpdateOne) SetLoadType(i int) *ServiceInfoUpdateOne {
	siuo.mutation.ResetLoadType()
	siuo.mutation.SetLoadType(i)
	return siuo
}

// AddLoadType adds i to load_type.
func (siuo *ServiceInfoUpdateOne) AddLoadType(i int) *ServiceInfoUpdateOne {
	siuo.mutation.AddLoadType(i)
	return siuo
}

// SetServiceName sets the service_name field.
func (siuo *ServiceInfoUpdateOne) SetServiceName(s string) *ServiceInfoUpdateOne {
	siuo.mutation.SetServiceName(s)
	return siuo
}

// SetServiceDesc sets the service_desc field.
func (siuo *ServiceInfoUpdateOne) SetServiceDesc(s string) *ServiceInfoUpdateOne {
	siuo.mutation.SetServiceDesc(s)
	return siuo
}

// SetCreateAt sets the create_at field.
func (siuo *ServiceInfoUpdateOne) SetCreateAt(t time.Time) *ServiceInfoUpdateOne {
	siuo.mutation.SetCreateAt(t)
	return siuo
}

// SetUpdateAt sets the update_at field.
func (siuo *ServiceInfoUpdateOne) SetUpdateAt(t time.Time) *ServiceInfoUpdateOne {
	siuo.mutation.SetUpdateAt(t)
	return siuo
}

// SetIsDelete sets the is_delete field.
func (siuo *ServiceInfoUpdateOne) SetIsDelete(i int8) *ServiceInfoUpdateOne {
	siuo.mutation.ResetIsDelete()
	siuo.mutation.SetIsDelete(i)
	return siuo
}

// AddIsDelete adds i to is_delete.
func (siuo *ServiceInfoUpdateOne) AddIsDelete(i int8) *ServiceInfoUpdateOne {
	siuo.mutation.AddIsDelete(i)
	return siuo
}

// Mutation returns the ServiceInfoMutation object of the builder.
func (siuo *ServiceInfoUpdateOne) Mutation() *ServiceInfoMutation {
	return siuo.mutation
}

// Save executes the query and returns the updated entity.
func (siuo *ServiceInfoUpdateOne) Save(ctx context.Context) (*ServiceInfo, error) {
	var (
		err  error
		node *ServiceInfo
	)
	if len(siuo.hooks) == 0 {
		node, err = siuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ServiceInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			siuo.mutation = mutation
			node, err = siuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(siuo.hooks) - 1; i >= 0; i-- {
			mut = siuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, siuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (siuo *ServiceInfoUpdateOne) SaveX(ctx context.Context) *ServiceInfo {
	node, err := siuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (siuo *ServiceInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := siuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (siuo *ServiceInfoUpdateOne) ExecX(ctx context.Context) {
	if err := siuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (siuo *ServiceInfoUpdateOne) sqlSave(ctx context.Context) (_node *ServiceInfo, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   serviceinfo.Table,
			Columns: serviceinfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: serviceinfo.FieldID,
			},
		},
	}
	id, ok := siuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ServiceInfo.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := siuo.mutation.LoadType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: serviceinfo.FieldLoadType,
		})
	}
	if value, ok := siuo.mutation.AddedLoadType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: serviceinfo.FieldLoadType,
		})
	}
	if value, ok := siuo.mutation.ServiceName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: serviceinfo.FieldServiceName,
		})
	}
	if value, ok := siuo.mutation.ServiceDesc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: serviceinfo.FieldServiceDesc,
		})
	}
	if value, ok := siuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: serviceinfo.FieldCreateAt,
		})
	}
	if value, ok := siuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: serviceinfo.FieldUpdateAt,
		})
	}
	if value, ok := siuo.mutation.IsDelete(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: serviceinfo.FieldIsDelete,
		})
	}
	if value, ok := siuo.mutation.AddedIsDelete(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: serviceinfo.FieldIsDelete,
		})
	}
	_node = &ServiceInfo{config: siuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, siuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{serviceinfo.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
