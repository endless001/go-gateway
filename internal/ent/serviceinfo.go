// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-gateway/internal/ent/serviceinfo"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
)

// ServiceInfo is the model entity for the ServiceInfo schema.
type ServiceInfo struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// LoadType holds the value of the "load_type" field.
	LoadType int `json:"load_type,omitempty"`
	// ServiceName holds the value of the "service_name" field.
	ServiceName string `json:"service_name,omitempty"`
	// ServiceDesc holds the value of the "service_desc" field.
	ServiceDesc string `json:"service_desc,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt time.Time `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt time.Time `json:"update_at,omitempty"`
	// IsDelete holds the value of the "is_delete" field.
	IsDelete int8 `json:"is_delete,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ServiceInfo) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullInt64{},  // load_type
		&sql.NullString{}, // service_name
		&sql.NullString{}, // service_desc
		&sql.NullTime{},   // create_at
		&sql.NullTime{},   // update_at
		&sql.NullInt64{},  // is_delete
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ServiceInfo fields.
func (si *ServiceInfo) assignValues(values ...interface{}) error {
	if m, n := len(values), len(serviceinfo.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	si.ID = int64(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field load_type", values[0])
	} else if value.Valid {
		si.LoadType = int(value.Int64)
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field service_name", values[1])
	} else if value.Valid {
		si.ServiceName = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field service_desc", values[2])
	} else if value.Valid {
		si.ServiceDesc = value.String
	}
	if value, ok := values[3].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field create_at", values[3])
	} else if value.Valid {
		si.CreateAt = value.Time
	}
	if value, ok := values[4].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field update_at", values[4])
	} else if value.Valid {
		si.UpdateAt = value.Time
	}
	if value, ok := values[5].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field is_delete", values[5])
	} else if value.Valid {
		si.IsDelete = int8(value.Int64)
	}
	return nil
}

// Update returns a builder for updating this ServiceInfo.
// Note that, you need to call ServiceInfo.Unwrap() before calling this method, if this ServiceInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (si *ServiceInfo) Update() *ServiceInfoUpdateOne {
	return (&ServiceInfoClient{config: si.config}).UpdateOne(si)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (si *ServiceInfo) Unwrap() *ServiceInfo {
	tx, ok := si.config.driver.(*txDriver)
	if !ok {
		panic("ent: ServiceInfo is not a transactional entity")
	}
	si.config.driver = tx.drv
	return si
}

// String implements the fmt.Stringer.
func (si *ServiceInfo) String() string {
	var builder strings.Builder
	builder.WriteString("ServiceInfo(")
	builder.WriteString(fmt.Sprintf("id=%v", si.ID))
	builder.WriteString(", load_type=")
	builder.WriteString(fmt.Sprintf("%v", si.LoadType))
	builder.WriteString(", service_name=")
	builder.WriteString(si.ServiceName)
	builder.WriteString(", service_desc=")
	builder.WriteString(si.ServiceDesc)
	builder.WriteString(", create_at=")
	builder.WriteString(si.CreateAt.Format(time.ANSIC))
	builder.WriteString(", update_at=")
	builder.WriteString(si.UpdateAt.Format(time.ANSIC))
	builder.WriteString(", is_delete=")
	builder.WriteString(fmt.Sprintf("%v", si.IsDelete))
	builder.WriteByte(')')
	return builder.String()
}

// ServiceInfos is a parsable slice of ServiceInfo.
type ServiceInfos []*ServiceInfo

func (si ServiceInfos) config(cfg config) {
	for _i := range si {
		si[_i].config = cfg
	}
}
